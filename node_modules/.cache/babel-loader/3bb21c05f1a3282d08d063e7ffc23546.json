{"ast":null,"code":"import _classCallCheck from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/src/components/Examplee.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nvar Examplee =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Examplee, _React$Component);\n\n  function Examplee() {\n    _classCallCheck(this, Examplee);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Examplee).apply(this, arguments));\n  }\n\n  _createClass(Examplee, [{\n    key: \"render\",\n    value: function render() {\n      var mediaRecorderDataChunks = [];\n      var realtimeCanvas = document.getElementById('waveform-realtime');\n      var recordingCanvas = document.getElementById('waveform-recording');\n      var recordingContainer = document.getElementById('recording-container');\n\n      var gotUserAudio = function gotUserAudio(stream) {\n        var audioCtx = new AudioContext();\n        var source = audioCtx.createMediaStreamSource(stream);\n        var analyser = audioCtx.createAnalyser();\n        source.connect(analyser);\n        var drawVisual;\n        visualizeRealtime(stream, realtimeCanvas);\n        visualizeRecording(stream, recordingCanvas); // visualize realtime waveform\n\n        function visualizeRealtime(stream, canvas) {\n          var canvasCtx = canvas.getContext('2d');\n          analyser.fftSize = 2048;\n          var bufferLength = analyser.frequencyBinCount; // half the FFT value\n\n          var dataArray = new Uint8Array(bufferLength); // create an array to store the data\n\n          canvasCtx.clearRect(0, 0, canvas.width, canvas.height);\n\n          function draw() {\n            drawVisual = requestAnimationFrame(draw);\n            analyser.getByteTimeDomainData(dataArray);\n            canvasCtx.fillStyle = '#1A1629';\n            canvasCtx.fillRect(0, 0, canvas.width, canvas.height);\n            canvasCtx.lineWidth = 1;\n            canvasCtx.strokeStyle = '#FFF';\n            canvasCtx.beginPath();\n            var sliceWidth = canvas.width * 1.0 / bufferLength;\n            var x = 0;\n\n            for (var i = 0; i < bufferLength; i++) {\n              var v = dataArray[i] / 128.0;\n              var y = v * canvas.height / 2;\n\n              if (i === 0) {\n                canvasCtx.moveTo(x, y);\n              } else {\n                canvasCtx.lineTo(x, y);\n              }\n\n              x += sliceWidth;\n            }\n\n            canvasCtx.lineTo(canvas.width, canvas.height / 2);\n            canvasCtx.stroke();\n          }\n\n          ;\n          draw();\n        } // visualize stream audio recording style\n\n\n        function visualizeRecording(stream, canvas) {\n          var canvasCtx = canvas.getContext('2d');\n          analyser.fftSize = 2048;\n          var bufferLength = analyser.frequencyBinCount;\n          var dataArray = new Float32Array(bufferLength);\n          canvasCtx.clearRect(0, 0, canvas.width, canvas.height);\n          canvasCtx.fillStyle = '#1A1629';\n          canvasCtx.fillRect(0, 0, canvas.width, canvas.height);\n          var x = 0;\n\n          function draw() {\n            if (x >= canvas.width) {\n              var tempWave = canvas.toDataURL('image/png');\n              var img = new Image();\n\n              img.onload = function () {\n                // set canvas size\n                canvas.width++;\n                canvasCtx.fillStyle = '#1A1629';\n                canvasCtx.fillRect(0, 0, canvas.width, canvas.height);\n                canvasCtx.drawImage(img, 0, 0); // todo make sure canvas is inside div and scrolled to end\n\n                strokeWave();\n              };\n\n              img.src = tempWave;\n            } else {\n              strokeWave();\n            }\n          }\n\n          ;\n          draw();\n\n          function strokeWave() {\n            drawVisual = requestAnimationFrame(draw);\n            analyser.getFloatTimeDomainData(dataArray);\n            canvasCtx.lineWidth = 1;\n            canvasCtx.strokeStyle = '#fff';\n            canvasCtx.beginPath();\n\n            for (var i = 0; i < bufferLength; i++) {\n              var v = dataArray[i] * 128.0;\n              var y = canvas.height / 2 + v;\n              canvasCtx.lineTo(x, y);\n            }\n\n            canvasCtx.stroke();\n            x++;\n          }\n        }\n      }; // start stream on page load!\n\n\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: false\n      }).then(gotUserAudio).catch(function (err) {\n        return console.log('gotLocalMediaStream error', err);\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        id: \"realtime-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"canvas\", {\n        id: \"waveform-realtime\",\n        width: \"800\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Examplee;\n}(React.Component);\n\nexport default withRouter(Examplee);","map":{"version":3,"sources":["/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/src/components/Examplee.js"],"names":["React","withRouter","Examplee","mediaRecorderDataChunks","realtimeCanvas","document","getElementById","recordingCanvas","recordingContainer","gotUserAudio","stream","audioCtx","AudioContext","source","createMediaStreamSource","analyser","createAnalyser","connect","drawVisual","visualizeRealtime","visualizeRecording","canvas","canvasCtx","getContext","fftSize","bufferLength","frequencyBinCount","dataArray","Uint8Array","clearRect","width","height","draw","requestAnimationFrame","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","i","v","y","moveTo","lineTo","stroke","Float32Array","tempWave","toDataURL","img","Image","onload","drawImage","strokeWave","src","getFloatTimeDomainData","navigator","mediaDevices","getUserMedia","audio","video","then","catch","err","console","log","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { withRouter } from 'react-router-dom';\n\n\nclass Examplee extends React.Component {\n  render(){\n    var mediaRecorderDataChunks = [];\n    var realtimeCanvas = document.getElementById('waveform-realtime');\n    var recordingCanvas = document.getElementById('waveform-recording');\n    var recordingContainer = document.getElementById('recording-container');\n\n    var gotUserAudio = function(stream) {\n\n      var audioCtx = new AudioContext();\n      var source = audioCtx.createMediaStreamSource(stream);\n      var analyser = audioCtx.createAnalyser();\n      source.connect(analyser);\n\n      var drawVisual;\n      visualizeRealtime(stream, realtimeCanvas);\n      visualizeRecording(stream, recordingCanvas);\n\n      // visualize realtime waveform\n      function visualizeRealtime(stream, canvas) {\n        var canvasCtx = canvas.getContext('2d');\n\n        analyser.fftSize = 2048;\n        var bufferLength = analyser.frequencyBinCount; // half the FFT value\n        var dataArray = new Uint8Array(bufferLength); // create an array to store the data\n\n        canvasCtx.clearRect(0, 0, canvas.width, canvas.height);\n\n        function draw() {\n          drawVisual = requestAnimationFrame(draw);\n\n          analyser.getByteTimeDomainData(dataArray);\n\n          canvasCtx.fillStyle = '#1A1629';\n          canvasCtx.fillRect(0, 0, canvas.width, canvas.height);\n          canvasCtx.lineWidth = 1;\n          canvasCtx.strokeStyle = '#FFF';\n          canvasCtx.beginPath();\n\n          var sliceWidth = canvas.width * 1.0 / bufferLength;\n          var x = 0;\n\n          for(var i = 0; i < bufferLength; i++) {\n\n            var v = dataArray[i] / 128.0;\n            var y = v * canvas.height/2;\n\n            if(i === 0) {\n              canvasCtx.moveTo(x, y);\n            } else {\n              canvasCtx.lineTo(x, y);\n            }\n\n            x += sliceWidth;\n          }\n\n          canvasCtx.lineTo(canvas.width, canvas.height/2);\n          canvasCtx.stroke();\n        };\n\n        draw();\n      }\n\n      // visualize stream audio recording style\n      function visualizeRecording(stream, canvas) {\n        var canvasCtx = canvas.getContext('2d');\n\n        analyser.fftSize = 2048;\n        var bufferLength = analyser.frequencyBinCount;\n        var dataArray = new Float32Array(bufferLength);\n\n        canvasCtx.clearRect(0, 0, canvas.width, canvas.height);\n        canvasCtx.fillStyle = '#1A1629';\n        canvasCtx.fillRect(0, 0, canvas.width, canvas.height);\n\n        var x = 0;\n\n        function draw() {\n          if ( x >= canvas.width ) {\n            var tempWave = canvas.toDataURL('image/png');\n            var img = new Image();\n            img.onload = function() {\n              // set canvas size\n              canvas.width++;\n              canvasCtx.fillStyle = '#1A1629';\n              canvasCtx.fillRect(0, 0, canvas.width, canvas.height);\n              canvasCtx.drawImage(img, 0, 0);\n\n              // todo make sure canvas is inside div and scrolled to end\n\n              strokeWave();\n            }\n            img.src = tempWave;\n          }\n          else {\n            strokeWave();\n          }\n        };\n\n        draw();\n\n        function strokeWave() {\n          drawVisual = requestAnimationFrame(draw);\n          analyser.getFloatTimeDomainData(dataArray);\n\n          canvasCtx.lineWidth = 1;\n          canvasCtx.strokeStyle = '#fff';\n          canvasCtx.beginPath();\n\n          for(var i = 0; i < bufferLength; i++) {\n            var v = dataArray[i] * 128.0;\n            var y = canvas.height/2 + v;\n            canvasCtx.lineTo(x, y);\n          }\n\n          canvasCtx.stroke();\n          x++;\n        }\n      }\n\n}\n// start stream on page load!\nnavigator.mediaDevices\n    .getUserMedia({ audio: true, video: false })\n    .then(gotUserAudio)\n    .catch(err => console.log('gotLocalMediaStream error', err));\nreturn(\n  <div>\n  <p id=\"realtime-container\">\n  <canvas id=\"waveform-realtime\" width=\"800\"></canvas>\n  </p>\n  </div>\n)\n}\n}\nexport default withRouter(Examplee);\n"]},"metadata":{},"sourceType":"module"}