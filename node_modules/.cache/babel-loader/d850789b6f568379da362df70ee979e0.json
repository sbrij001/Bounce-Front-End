{"ast":null,"code":"import _objectSpread from \"/Users/thuanbui/source_code/react-mapbox-gl-cluster/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/thuanbui/source_code/react-mapbox-gl-cluster/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thuanbui/source_code/react-mapbox-gl-cluster/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thuanbui/source_code/react-mapbox-gl-cluster/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thuanbui/source_code/react-mapbox-gl-cluster/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thuanbui/source_code/react-mapbox-gl-cluster/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport _ from \"lodash\";\nimport { featureCollection as createFeatureCollection, point as createPoint } from \"@turf/helpers\";\nimport { findPointsWithSameLocation } from \"../utils\";\nimport { ClusterOptions } from \"../constants/ClusterOptions\";\nimport MappedComponent from \"../../components/MappedComponent\";\n\nvar detectLocationHasOverlappedPoints = function detectLocationHasOverlappedPoints(WrappedComponent) {\n  var LayerWithOverlappedPointComponent =\n  /*#__PURE__*/\n  function (_MappedComponent) {\n    _inherits(LayerWithOverlappedPointComponent, _MappedComponent);\n\n    function LayerWithOverlappedPointComponent() {\n      var _getPrototypeOf2;\n\n      var _this;\n\n      _classCallCheck(this, LayerWithOverlappedPointComponent);\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LayerWithOverlappedPointComponent)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n      _this.onClick = function (properties, lngLat, event, meta) {\n        var onClick = _this.props.onClick;\n\n        _this._handleClick(properties, lngLat, event, meta, onClick);\n      };\n\n      _this.onClusterClick = function (properties, lngLat, event, meta) {\n        var onClusterClick = _this.props.onClusterClick;\n\n        _this._handleClick(properties, lngLat, event, meta, onClusterClick);\n      };\n\n      return _this;\n    }\n\n    _createClass(LayerWithOverlappedPointComponent, [{\n      key: \"_handleClick\",\n      value: function _handleClick(properties, lngLat, event, meta, callback) {\n        if (!_.isArray(properties)) {\n          if (_.isFunction(callback)) {\n            callback(properties, lngLat, event, meta);\n          }\n\n          return true;\n        }\n\n        var onClickOverlappedPoints = this.props.onClickOverlappedPoints;\n        var map = this.getMapInstance();\n        var features = properties.map(function (prop) {\n          return createPoint(prop.coordinates, prop);\n        });\n        var data = createFeatureCollection(features);\n        var points = findPointsWithSameLocation(data, lngLat, map, ClusterOptions.NearestPointsRadius, ClusterOptions.ZoomLevel);\n\n        if (points) {\n          if (_.isFunction(onClickOverlappedPoints)) {\n            onClickOverlappedPoints(features, lngLat, event, meta);\n            return false;\n          }\n        } else if (_.isFunction(callback)) {\n          callback(properties, lngLat, event, meta);\n        }\n\n        return true;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = _objectSpread({}, this.props, {\n          onClick: this.onClick,\n          onClusterClick: this.onClusterClick\n        });\n\n        return React.createElement(WrappedComponent, props);\n      }\n    }]);\n\n    return LayerWithOverlappedPointComponent;\n  }(MappedComponent);\n\n  LayerWithOverlappedPointComponent.contextTypes = {\n    map: PropTypes.object\n  };\n  LayerWithOverlappedPointComponent.propTypes = _objectSpread({}, WrappedComponent.propTypes, {\n    /**\n     * [Optional] Handle when user click on a location which has overlapped points\n     */\n    onClickOverlappedPoints: PropTypes.func\n  });\n  LayerWithOverlappedPointComponent.defaultProps = _objectSpread({}, WrappedComponent.defaultProps);\n  return LayerWithOverlappedPointComponent;\n};\n\nexport default detectLocationHasOverlappedPoints;","map":null,"metadata":{},"sourceType":"module"}