{"ast":null,"code":"import _classCallCheck from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/src/components/SongList.js\";\nimport React from 'react';\nimport SongCard from './SongCard';\nimport { Link, withRouter } from 'react-router-dom'; //withRouter gives the app the props\n\nvar SongList =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SongList, _React$Component);\n\n  function SongList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SongList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SongList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      trackList: [] // currentAudio: null\n      // handleSelectedAudio =(audio)=>{\n      //   this.setState({\n      //     currentAudio: audio\n      //   })\n      // }\n\n    };\n\n    _this.componentDidMount = function () {\n      var apiKey = '?apikey=MTU1YjllNjUtOTIwNi00MGJlLWJlOWMtZGYxMjJhZDI0NTk5&limit=10';\n      var href;\n\n      if (_this.props.currentPlaylist.links) {\n        href = _this.props.currentPlaylist.links.tracks.href;\n      } // console.log(this.props);\n\n\n      if (href) {\n        var url = \"\".concat(href).concat(apiKey);\n        fetch(url).then(function (resp) {\n          return resp.json();\n        }).then(function (tracksData) {\n          _this.setState({\n            trackList: tracksData.tracks\n          });\n        });\n      }\n    };\n\n    _this.renderTracks = function () {\n      var newArr = _this.state.trackList.map(function (track) {\n        return React.createElement(SongCard, {\n          key: track.id,\n          track: track,\n          selectedTrackCard: _this.props.selectedTrackCard,\n          currentPlaylist: _this.props.currentPlaylist,\n          user: _this.props.user,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 38\n          },\n          __self: this\n        });\n      });\n\n      return newArr;\n    };\n\n    _this.savePlaylist = function (event) {\n      var token = localStorage.token;\n      var number = 1;\n      var formData = new FormData();\n      formData.append(\"user_playlist[user_id]\", _this.props.user.id);\n      formData.append(\"user_playlist[napster_playlist_id]\", _this.props.currentPlaylist.id);\n      formData.append(\"user_playlist[playlist_id]\", number);\n      fetch(\"http://localhost:3000/api/v1/user_playlists\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Accept: \"application/json\",\n          Authorization: \"Bearer \".concat(token)\n        },\n        body: JSON.stringify({\n          user_playlist: {\n            user_id: _this.props.user.id,\n            napster_playlist_id: _this.props.currentPlaylist.id,\n            playlist_id: 1\n          }\n        })\n      }).then(function (resp) {\n        return resp.json();\n      }).then(function (playlist) {\n        // console.log(this.props.user.user.id)\n        _this.props.addPlayistToUser(_this.state);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(SongList, [{\n    key: \"render\",\n    value: function render() {\n      // debugger\n      console.log(\"SongList props\", this.props);\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, \"Song List\"), React.createElement(\"button\", {\n        onClick: this.savePlaylist,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"Add Playlist To Library\"), this.renderTracks());\n    }\n  }]);\n\n  return SongList;\n}(React.Component);\n\nexport default withRouter(SongList);","map":{"version":3,"sources":["/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/src/components/SongList.js"],"names":["React","SongCard","Link","withRouter","SongList","state","trackList","componentDidMount","apiKey","href","props","currentPlaylist","links","tracks","url","fetch","then","resp","json","tracksData","setState","renderTracks","newArr","map","track","id","selectedTrackCard","user","savePlaylist","event","token","localStorage","number","formData","FormData","append","method","headers","Accept","Authorization","body","JSON","stringify","user_playlist","user_id","napster_playlist_id","playlist_id","playlist","addPlayistToUser","console","log","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport SongCard from './SongCard';\nimport { Link, withRouter } from 'react-router-dom';\n//withRouter gives the app the props\nclass SongList extends React.Component{\n  state = {\n    trackList: [],\n    // currentAudio: null\n  }\n\n // handleSelectedAudio =(audio)=>{\n //   this.setState({\n //     currentAudio: audio\n //   })\n // }\n\n  componentDidMount = () => {\n    const apiKey = '?apikey=MTU1YjllNjUtOTIwNi00MGJlLWJlOWMtZGYxMjJhZDI0NTk5&limit=10';\n    let href\n    if(this.props.currentPlaylist.links){\n      href = this.props.currentPlaylist.links.tracks.href\n    }\n    // console.log(this.props);\n    if(href){\n      const url = `${href}${apiKey}`\n      fetch(url)\n      .then(resp => resp.json())\n      .then(tracksData => {\n        this.setState({\n          trackList: tracksData.tracks\n        })\n      })\n    }\n  }\n\n  renderTracks = () => {\n      const newArr = this.state.trackList.map(track => {\n        return <SongCard key={track.id} track={track} selectedTrackCard={this.props.selectedTrackCard} currentPlaylist={this.props.currentPlaylist} user={this.props.user}/>\n      })\n      return newArr\n  }\n\n  savePlaylist = (event) => {\n    let token = localStorage.token\n    let number = 1\n    const formData = new FormData()\n    formData.append(\"user_playlist[user_id]\", this.props.user.id)\n    formData.append(\"user_playlist[napster_playlist_id]\", this.props.currentPlaylist.id)\n    formData.append(\"user_playlist[playlist_id]\", number)\n    fetch(\"http://localhost:3000/api/v1/user_playlists\", {\n\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n        Authorization: `Bearer ${token}`\n      },\n      body: JSON.stringify({\n        user_playlist: {\n          user_id: this.props.user.id,\n          napster_playlist_id: this.props.currentPlaylist.id,\n          playlist_id: 1\n        }\n      })\n    })\n    .then(resp => resp.json())\n    .then(playlist => {\n      // console.log(this.props.user.user.id)\n      this.props.addPlayistToUser(this.state)\n    })\n  }\n\n  render(){\n    // debugger\n    console.log(\"SongList props\", this.props);\n    return(\n      <div>\n      <h1>Song List</h1>\n      <button onClick={this.savePlaylist}>Add Playlist To Library</button>\n      {this.renderTracks()}\n      </div>\n    )\n  }\n}\n\n\nexport default withRouter(SongList);\n"]},"metadata":{},"sourceType":"module"}