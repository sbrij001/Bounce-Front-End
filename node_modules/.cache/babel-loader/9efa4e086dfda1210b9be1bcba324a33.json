{"ast":null,"code":"'use strict';\n\nimport _objectSpread from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/src/menuFactory.js\";\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport baseStyles from './baseStyles';\nimport CrossIcon from './CrossIcon';\nexport default (function (styles) {\n  var Menu =\n  /*#__PURE__*/\n  function (_Component) {\n    _inherits(Menu, _Component);\n\n    function Menu(props) {\n      var _this;\n\n      _classCallCheck(this, Menu);\n\n      _this = _possibleConstructorReturn(this, _getPrototypeOf(Menu).call(this, props));\n      _this.state = {\n        isOpen: false\n      };\n\n      if (!styles) {\n        throw new Error('No styles supplied');\n      }\n\n      return _this;\n    }\n\n    _createClass(Menu, [{\n      key: \"toggleMenu\",\n      value: function toggleMenu() {\n        var _this2 = this;\n\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var isOpen = options.isOpen,\n            noStateChange = options.noStateChange;\n        var newState = {\n          isOpen: typeof isOpen !== 'undefined' ? isOpen : !this.state.isOpen\n        };\n        this.applyWrapperStyles();\n        this.setState(newState, function () {\n          !noStateChange && _this2.props.onStateChange(newState);\n\n          if (!_this2.props.disableAutoFocus) {\n            // For accessibility reasons, ensures that when we toggle open,\n            // we focus the first menu item if one exists.\n            if (newState.isOpen) {\n              var firstItem = document.querySelector('.bm-item');\n\n              if (firstItem) {\n                firstItem.focus();\n              }\n            } else {\n              if (document.activeElement) {\n                document.activeElement.blur();\n              } else {\n                document.body.blur(); // Needed for IE\n              }\n            }\n          } // Timeout ensures wrappers are cleared after animation finishes.\n\n\n          _this2.timeoutId && clearTimeout(_this2.timeoutId);\n          _this2.timeoutId = setTimeout(function () {\n            _this2.timeoutId = null;\n\n            if (!newState.isOpen) {\n              _this2.applyWrapperStyles(false);\n            }\n          }, 500);\n        });\n      } // Applies component-specific styles to external wrapper elements.\n\n    }, {\n      key: \"applyWrapperStyles\",\n      value: function applyWrapperStyles() {\n        var set = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        var applyClass = function applyClass(el, className) {\n          return el.classList[set ? 'add' : 'remove'](className);\n        };\n\n        if (this.props.htmlClassName) {\n          applyClass(document.querySelector('html'), this.props.htmlClassName);\n        }\n\n        if (this.props.bodyClassName) {\n          applyClass(document.querySelector('body'), this.props.bodyClassName);\n        }\n\n        if (styles.pageWrap && this.props.pageWrapId) {\n          this.handleExternalWrapper(this.props.pageWrapId, styles.pageWrap, set);\n        }\n\n        if (styles.outerContainer && this.props.outerContainerId) {\n          this.handleExternalWrapper(this.props.outerContainerId, styles.outerContainer, set);\n        }\n      } // Sets or unsets styles on DOM elements outside the menu component.\n      // This is necessary for correct page interaction with some of the menus.\n      // Throws and returns if the required external elements don't exist,\n      // which means any external page animations won't be applied.\n\n    }, {\n      key: \"handleExternalWrapper\",\n      value: function handleExternalWrapper(id, wrapperStyles, set) {\n        var wrapper = document.getElementById(id);\n\n        if (!wrapper) {\n          console.error(\"Element with ID '\" + id + \"' not found\");\n          return;\n        }\n\n        var builtStyles = this.getStyle(wrapperStyles);\n\n        for (var prop in builtStyles) {\n          if (builtStyles.hasOwnProperty(prop)) {\n            wrapper.style[prop] = set ? builtStyles[prop] : '';\n          }\n        } // Prevent any horizontal scroll.\n        // Only set overflow-x as an inline style if htmlClassName or\n        // bodyClassName is not passed in. Otherwise, it is up to the caller to\n        // decide if they want to set the overflow style in CSS using the custom\n        // class names.\n\n\n        var applyOverflow = function applyOverflow(el) {\n          return el.style['overflow-x'] = set ? 'hidden' : '';\n        };\n\n        if (!this.props.htmlClassName) {\n          applyOverflow(document.querySelector('html'));\n        }\n\n        if (!this.props.bodyClassName) {\n          applyOverflow(document.querySelector('body'));\n        }\n      } // Builds styles incrementally for a given element.\n\n    }, {\n      key: \"getStyles\",\n      value: function getStyles(el, index, inline) {\n        var propName = 'bm' + el.replace(el.charAt(0), el.charAt(0).toUpperCase()); // Set base styles.\n\n        var output = baseStyles[el] ? this.getStyle(baseStyles[el]) : {}; // Add animation-specific styles.\n\n        if (styles[el]) {\n          output = _objectSpread({}, output, this.getStyle(styles[el], index + 1));\n        } // Add custom styles.\n\n\n        if (this.props.styles[propName]) {\n          output = _objectSpread({}, output, this.props.styles[propName]);\n        } // Add element inline styles.\n\n\n        if (inline) {\n          output = _objectSpread({}, output, inline);\n        }\n\n        return output;\n      }\n    }, {\n      key: \"getStyle\",\n      value: function getStyle(style, index) {\n        var width = this.props.width;\n        var formattedWidth = typeof width !== 'string' ? \"\".concat(width, \"px\") : width;\n        return style(this.state.isOpen, formattedWidth, this.props.right, index);\n      }\n    }, {\n      key: \"listenForClose\",\n      value: function listenForClose(e) {\n        e = e || window.event; // Close on ESC, unless disabled\n\n        if (!this.props.disableCloseOnEsc && this.state.isOpen && (e.key === 'Escape' || e.keyCode === 27)) {\n          this.toggleMenu();\n        }\n      }\n    }, {\n      key: \"shouldDisableOverlayClick\",\n      value: function shouldDisableOverlayClick() {\n        if (typeof this.props.disableOverlayClick === 'function') {\n          return this.props.disableOverlayClick();\n        } else {\n          return this.props.disableOverlayClick;\n        }\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        // Bind ESC key handler (unless custom function supplied).\n        if (this.props.customOnKeyDown) {\n          window.onkeydown = this.props.customOnKeyDown;\n        } else {\n          window.onkeydown = this.listenForClose.bind(this);\n        } // Allow initial open state to be set by props.\n\n\n        if (this.props.isOpen) {\n          this.toggleMenu({\n            isOpen: true,\n            noStateChange: true\n          });\n        }\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        window.onkeydown = null;\n        this.applyWrapperStyles(false);\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        var wasToggled = typeof this.props.isOpen !== 'undefined' && this.props.isOpen !== this.state.isOpen && this.props.isOpen !== prevProps.isOpen;\n\n        if (wasToggled) {\n          this.toggleMenu(); // Toggling changes SVG animation requirements, so we defer these until the next componentDidUpdate\n\n          return;\n        }\n\n        if (styles.svg) {\n          var morphShape = ReactDOM.findDOMNode(this, 'bm-morph-shape');\n          var path = styles.svg.lib(morphShape).select('path');\n\n          if (this.state.isOpen) {\n            // Animate SVG path.\n            styles.svg.animate(path);\n          } else {\n            // Reset path (timeout ensures animation happens off screen).\n            setTimeout(function () {\n              path.attr('d', styles.svg.pathInitial);\n            }, 300);\n          }\n        }\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this3 = this;\n\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 232\n          },\n          __self: this\n        }, !this.props.noOverlay && React.createElement(\"div\", {\n          className: \"bm-overlay \".concat(this.props.overlayClassName).trim(),\n          onClick: function onClick() {\n            return !_this3.shouldDisableOverlayClick() && _this3.toggleMenu();\n          },\n          style: this.getStyles('overlay'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 234\n          },\n          __self: this\n        }), React.createElement(\"div\", {\n          id: this.props.id,\n          className: \"bm-menu-wrap \".concat(this.props.className).trim(),\n          style: this.getStyles('menuWrap'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 242\n          },\n          __self: this\n        }, styles.svg && React.createElement(\"div\", {\n          className: \"bm-morph-shape \".concat(this.props.morphShapeClassName).trim(),\n          style: this.getStyles('morphShape'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 248\n          },\n          __self: this\n        }, React.createElement(\"svg\", {\n          width: \"100%\",\n          height: \"100%\",\n          viewBox: \"0 0 100 800\",\n          preserveAspectRatio: \"none\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 254\n          },\n          __self: this\n        }, React.createElement(\"path\", {\n          d: styles.svg.pathInitial,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260\n          },\n          __self: this\n        }))), React.createElement(\"div\", {\n          className: \"bm-menu \".concat(this.props.menuClassName).trim(),\n          style: this.getStyles('menu'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 264\n          },\n          __self: this\n        }, React.createElement(\"nav\", {\n          className: \"bm-item-list \".concat(this.props.itemListClassName).trim(),\n          style: this.getStyles('itemList'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 268\n          },\n          __self: this\n        }, React.Children.map(this.props.children, function (item, index) {\n          if (item) {\n            var classList = ['bm-item', _this3.props.itemClassName, item.props.className].filter(function (className) {\n              return !!className;\n            }).join(' ');\n            var extraProps = {\n              key: index,\n              className: classList,\n              style: _this3.getStyles('item', index, item.props.style),\n              tabIndex: _this3.state.isOpen ? 0 : -1\n            };\n            return React.cloneElement(item, extraProps);\n          }\n        }))), this.props.customCrossIcon !== false && React.createElement(\"div\", {\n          style: this.getStyles('closeButton'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 295\n          },\n          __self: this\n        }, React.createElement(CrossIcon, {\n          onClick: function onClick() {\n            return _this3.toggleMenu();\n          },\n          styles: this.props.styles,\n          customIcon: this.props.customCrossIcon,\n          className: this.props.crossButtonClassName,\n          crossClassName: this.props.crossClassName,\n          tabIndex: this.state.isOpen ? 0 : -1,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 296\n          },\n          __self: this\n        }))), this.props.customBurgerIcon !== false && React.createElement(\"div\", {\n          style: this.getStyles('burgerIcon'),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 308\n          },\n          __self: this\n        }, React.createElement(BurgerIcon, {\n          onClick: function onClick() {\n            return _this3.toggleMenu();\n          },\n          styles: this.props.styles,\n          customIcon: this.props.customBurgerIcon,\n          className: this.props.burgerButtonClassName,\n          barClassName: this.props.burgerBarClassName,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 309\n          },\n          __self: this\n        })));\n      }\n    }]);\n\n    return Menu;\n  }(Component);\n\n  Menu.propTypes = {\n    bodyClassName: PropTypes.string,\n    burgerBarClassName: PropTypes.string,\n    burgerButtonClassName: PropTypes.string,\n    className: PropTypes.string,\n    crossButtonClassName: PropTypes.string,\n    crossClassName: PropTypes.string,\n    customBurgerIcon: PropTypes.oneOfType([PropTypes.element, PropTypes.oneOf([false])]),\n    customCrossIcon: PropTypes.oneOfType([PropTypes.element, PropTypes.oneOf([false])]),\n    customOnKeyDown: PropTypes.func,\n    disableAutoFocus: PropTypes.bool,\n    disableCloseOnEsc: PropTypes.bool,\n    disableOverlayClick: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    htmlClassName: PropTypes.string,\n    id: PropTypes.string,\n    isOpen: PropTypes.bool,\n    itemClassName: PropTypes.string,\n    itemListClassName: PropTypes.string,\n    menuClassName: PropTypes.string,\n    morphShapeClassName: PropTypes.string,\n    noOverlay: PropTypes.bool,\n    onStateChange: PropTypes.func,\n    outerContainerId: styles && styles.outerContainer ? PropTypes.string.isRequired : PropTypes.string,\n    overlayClassName: PropTypes.string,\n    pageWrapId: styles && styles.pageWrap ? PropTypes.string.isRequired : PropTypes.string,\n    right: PropTypes.bool,\n    styles: PropTypes.object,\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n  };\n  Menu.defaultProps = {\n    bodyClassName: '',\n    burgerBarClassName: '',\n    burgerButtonClassName: '',\n    className: '',\n    crossButtonClassName: '',\n    crossClassName: '',\n    disableAutoFocus: false,\n    disableCloseOnEsc: false,\n    htmlClassName: '',\n    id: '',\n    itemClassName: '',\n    itemListClassName: '',\n    menuClassName: '',\n    morphShapeClassName: '',\n    noOverlay: false,\n    onStateChange: function onStateChange() {},\n    outerContainerId: '',\n    overlayClassName: '',\n    pageWrapId: '',\n    styles: {},\n    width: 300\n  };\n  return Menu;\n});","map":{"version":3,"sources":["/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/src/menuFactory.js"],"names":["React","Component","ReactDOM","PropTypes","baseStyles","CrossIcon","styles","Menu","props","state","isOpen","Error","options","noStateChange","newState","applyWrapperStyles","setState","onStateChange","disableAutoFocus","firstItem","document","querySelector","focus","activeElement","blur","body","timeoutId","clearTimeout","setTimeout","set","applyClass","el","className","classList","htmlClassName","bodyClassName","pageWrap","pageWrapId","handleExternalWrapper","outerContainer","outerContainerId","id","wrapperStyles","wrapper","getElementById","console","error","builtStyles","getStyle","prop","hasOwnProperty","style","applyOverflow","index","inline","propName","replace","charAt","toUpperCase","output","width","formattedWidth","right","e","window","event","disableCloseOnEsc","key","keyCode","toggleMenu","disableOverlayClick","customOnKeyDown","onkeydown","listenForClose","bind","prevProps","wasToggled","svg","morphShape","findDOMNode","path","lib","select","animate","attr","pathInitial","noOverlay","overlayClassName","trim","shouldDisableOverlayClick","getStyles","morphShapeClassName","menuClassName","itemListClassName","Children","map","children","item","itemClassName","filter","join","extraProps","tabIndex","cloneElement","customCrossIcon","crossButtonClassName","crossClassName","customBurgerIcon","burgerButtonClassName","burgerBarClassName","propTypes","string","oneOfType","element","oneOf","func","bool","isRequired","object","number","defaultProps"],"mappings":"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","sourcesContent":["'use strict';\n\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport baseStyles from './baseStyles';\nimport CrossIcon from './CrossIcon';\n\nexport default styles => {\n  class Menu extends Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        isOpen: false\n      };\n\n      if (!styles) {\n        throw new Error('No styles supplied');\n      }\n    }\n\n    toggleMenu(options = {}) {\n      const { isOpen, noStateChange } = options;\n      const newState = {\n        isOpen: typeof isOpen !== 'undefined' ? isOpen : !this.state.isOpen\n      };\n\n      this.applyWrapperStyles();\n\n      this.setState(newState, () => {\n        !noStateChange && this.props.onStateChange(newState);\n\n        if (!this.props.disableAutoFocus) {\n          // For accessibility reasons, ensures that when we toggle open,\n          // we focus the first menu item if one exists.\n          if (newState.isOpen) {\n            const firstItem = document.querySelector('.bm-item');\n            if (firstItem) {\n              firstItem.focus();\n            }\n          } else {\n            if (document.activeElement) {\n              document.activeElement.blur();\n            } else {\n              document.body.blur(); // Needed for IE\n            }\n          }\n        }\n\n        // Timeout ensures wrappers are cleared after animation finishes.\n        this.timeoutId && clearTimeout(this.timeoutId);\n        this.timeoutId = setTimeout(() => {\n          this.timeoutId = null;\n          if (!newState.isOpen) {\n            this.applyWrapperStyles(false);\n          }\n        }, 500);\n      });\n    }\n\n    // Applies component-specific styles to external wrapper elements.\n    applyWrapperStyles(set = true) {\n      const applyClass = (el, className) =>\n        el.classList[set ? 'add' : 'remove'](className);\n\n      if (this.props.htmlClassName) {\n        applyClass(document.querySelector('html'), this.props.htmlClassName);\n      }\n      if (this.props.bodyClassName) {\n        applyClass(document.querySelector('body'), this.props.bodyClassName);\n      }\n\n      if (styles.pageWrap && this.props.pageWrapId) {\n        this.handleExternalWrapper(this.props.pageWrapId, styles.pageWrap, set);\n      }\n\n      if (styles.outerContainer && this.props.outerContainerId) {\n        this.handleExternalWrapper(\n          this.props.outerContainerId,\n          styles.outerContainer,\n          set\n        );\n      }\n    }\n\n    // Sets or unsets styles on DOM elements outside the menu component.\n    // This is necessary for correct page interaction with some of the menus.\n    // Throws and returns if the required external elements don't exist,\n    // which means any external page animations won't be applied.\n    handleExternalWrapper(id, wrapperStyles, set) {\n      const wrapper = document.getElementById(id);\n\n      if (!wrapper) {\n        console.error(\"Element with ID '\" + id + \"' not found\");\n        return;\n      }\n\n      const builtStyles = this.getStyle(wrapperStyles);\n\n      for (const prop in builtStyles) {\n        if (builtStyles.hasOwnProperty(prop)) {\n          wrapper.style[prop] = set ? builtStyles[prop] : '';\n        }\n      }\n\n      // Prevent any horizontal scroll.\n      // Only set overflow-x as an inline style if htmlClassName or\n      // bodyClassName is not passed in. Otherwise, it is up to the caller to\n      // decide if they want to set the overflow style in CSS using the custom\n      // class names.\n      const applyOverflow = el =>\n        (el.style['overflow-x'] = set ? 'hidden' : '');\n      if (!this.props.htmlClassName) {\n        applyOverflow(document.querySelector('html'));\n      }\n      if (!this.props.bodyClassName) {\n        applyOverflow(document.querySelector('body'));\n      }\n    }\n\n    // Builds styles incrementally for a given element.\n    getStyles(el, index, inline) {\n      const propName =\n        'bm' + el.replace(el.charAt(0), el.charAt(0).toUpperCase());\n\n      // Set base styles.\n      let output = baseStyles[el] ? this.getStyle(baseStyles[el]) : {};\n\n      // Add animation-specific styles.\n      if (styles[el]) {\n        output = {\n          ...output,\n          ...this.getStyle(styles[el], index + 1)\n        };\n      }\n\n      // Add custom styles.\n      if (this.props.styles[propName]) {\n        output = {\n          ...output,\n          ...this.props.styles[propName]\n        };\n      }\n\n      // Add element inline styles.\n      if (inline) {\n        output = {\n          ...output,\n          ...inline\n        };\n      }\n\n      return output;\n    }\n\n    getStyle(style, index) {\n      const { width } = this.props;\n      const formattedWidth = typeof width !== 'string' ? `${width}px` : width;\n      return style(this.state.isOpen, formattedWidth, this.props.right, index);\n    }\n\n    listenForClose(e) {\n      e = e || window.event;\n\n      // Close on ESC, unless disabled\n      if (\n        !this.props.disableCloseOnEsc &&\n        this.state.isOpen &&\n        (e.key === 'Escape' || e.keyCode === 27)\n      ) {\n        this.toggleMenu();\n      }\n    }\n\n    shouldDisableOverlayClick() {\n      if (typeof this.props.disableOverlayClick === 'function') {\n        return this.props.disableOverlayClick();\n      } else {\n        return this.props.disableOverlayClick;\n      }\n    }\n\n    componentDidMount() {\n      // Bind ESC key handler (unless custom function supplied).\n      if (this.props.customOnKeyDown) {\n        window.onkeydown = this.props.customOnKeyDown;\n      } else {\n        window.onkeydown = this.listenForClose.bind(this);\n      }\n\n      // Allow initial open state to be set by props.\n      if (this.props.isOpen) {\n        this.toggleMenu({ isOpen: true, noStateChange: true });\n      }\n    }\n\n    componentWillUnmount() {\n      window.onkeydown = null;\n\n      this.applyWrapperStyles(false);\n    }\n\n    componentDidUpdate(prevProps) {\n      const wasToggled =\n        typeof this.props.isOpen !== 'undefined' &&\n        this.props.isOpen !== this.state.isOpen &&\n        this.props.isOpen !== prevProps.isOpen;\n      if (wasToggled) {\n        this.toggleMenu();\n        // Toggling changes SVG animation requirements, so we defer these until the next componentDidUpdate\n        return;\n      }\n\n      if (styles.svg) {\n        const morphShape = ReactDOM.findDOMNode(this, 'bm-morph-shape');\n        const path = styles.svg.lib(morphShape).select('path');\n\n        if (this.state.isOpen) {\n          // Animate SVG path.\n          styles.svg.animate(path);\n        } else {\n          // Reset path (timeout ensures animation happens off screen).\n          setTimeout(() => {\n            path.attr('d', styles.svg.pathInitial);\n          }, 300);\n        }\n      }\n    }\n\n    render() {\n      return (\n        <div>\n          {!this.props.noOverlay && (\n            <div\n              className={`bm-overlay ${this.props.overlayClassName}`.trim()}\n              onClick={() =>\n                !this.shouldDisableOverlayClick() && this.toggleMenu()\n              }\n              style={this.getStyles('overlay')}\n            />\n          )}\n          <div\n            id={this.props.id}\n            className={`bm-menu-wrap ${this.props.className}`.trim()}\n            style={this.getStyles('menuWrap')}\n          >\n            {styles.svg && (\n              <div\n                className={`bm-morph-shape ${\n                  this.props.morphShapeClassName\n                }`.trim()}\n                style={this.getStyles('morphShape')}\n              >\n                <svg\n                  width=\"100%\"\n                  height=\"100%\"\n                  viewBox=\"0 0 100 800\"\n                  preserveAspectRatio=\"none\"\n                >\n                  <path d={styles.svg.pathInitial} />\n                </svg>\n              </div>\n            )}\n            <div\n              className={`bm-menu ${this.props.menuClassName}`.trim()}\n              style={this.getStyles('menu')}\n            >\n              <nav\n                className={`bm-item-list ${\n                  this.props.itemListClassName\n                }`.trim()}\n                style={this.getStyles('itemList')}\n              >\n                {React.Children.map(this.props.children, (item, index) => {\n                  if (item) {\n                    const classList = [\n                      'bm-item',\n                      this.props.itemClassName,\n                      item.props.className\n                    ]\n                      .filter(className => !!className)\n                      .join(' ');\n                    const extraProps = {\n                      key: index,\n                      className: classList,\n                      style: this.getStyles('item', index, item.props.style),\n                      tabIndex: this.state.isOpen ? 0 : -1\n                    };\n                    return React.cloneElement(item, extraProps);\n                  }\n                })}\n              </nav>\n            </div>\n            {this.props.customCrossIcon !== false && (\n              <div style={this.getStyles('closeButton')}>\n                <CrossIcon\n                  onClick={() => this.toggleMenu()}\n                  styles={this.props.styles}\n                  customIcon={this.props.customCrossIcon}\n                  className={this.props.crossButtonClassName}\n                  crossClassName={this.props.crossClassName}\n                  tabIndex={this.state.isOpen ? 0 : -1}\n                />\n              </div>\n            )}\n          </div>\n          {this.props.customBurgerIcon !== false && (\n            <div style={this.getStyles('burgerIcon')}>\n              <BurgerIcon\n                onClick={() => this.toggleMenu()}\n                styles={this.props.styles}\n                customIcon={this.props.customBurgerIcon}\n                className={this.props.burgerButtonClassName}\n                barClassName={this.props.burgerBarClassName}\n              />\n            </div>\n          )}\n        </div>\n      );\n    }\n  }\n\n  Menu.propTypes = {\n    bodyClassName: PropTypes.string,\n    burgerBarClassName: PropTypes.string,\n    burgerButtonClassName: PropTypes.string,\n    className: PropTypes.string,\n    crossButtonClassName: PropTypes.string,\n    crossClassName: PropTypes.string,\n    customBurgerIcon: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.oneOf([false])\n    ]),\n    customCrossIcon: PropTypes.oneOfType([\n      PropTypes.element,\n      PropTypes.oneOf([false])\n    ]),\n    customOnKeyDown: PropTypes.func,\n    disableAutoFocus: PropTypes.bool,\n    disableCloseOnEsc: PropTypes.bool,\n    disableOverlayClick: PropTypes.oneOfType([PropTypes.bool, PropTypes.func]),\n    htmlClassName: PropTypes.string,\n    id: PropTypes.string,\n    isOpen: PropTypes.bool,\n    itemClassName: PropTypes.string,\n    itemListClassName: PropTypes.string,\n    menuClassName: PropTypes.string,\n    morphShapeClassName: PropTypes.string,\n    noOverlay: PropTypes.bool,\n    onStateChange: PropTypes.func,\n    outerContainerId:\n      styles && styles.outerContainer\n        ? PropTypes.string.isRequired\n        : PropTypes.string,\n    overlayClassName: PropTypes.string,\n    pageWrapId:\n      styles && styles.pageWrap\n        ? PropTypes.string.isRequired\n        : PropTypes.string,\n    right: PropTypes.bool,\n    styles: PropTypes.object,\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string])\n  };\n\n  Menu.defaultProps = {\n    bodyClassName: '',\n    burgerBarClassName: '',\n    burgerButtonClassName: '',\n    className: '',\n    crossButtonClassName: '',\n    crossClassName: '',\n    disableAutoFocus: false,\n    disableCloseOnEsc: false,\n    htmlClassName: '',\n    id: '',\n    itemClassName: '',\n    itemListClassName: '',\n    menuClassName: '',\n    morphShapeClassName: '',\n    noOverlay: false,\n    onStateChange: () => {},\n    outerContainerId: '',\n    overlayClassName: '',\n    pageWrapId: '',\n    styles: {},\n    width: 300\n  };\n\n  return Menu;\n};\n"]},"metadata":{},"sourceType":"module"}