{"ast":null,"code":"import _objectSpread from \"/Users/thuanbui/source_code/react-mapbox-gl-spiderifier/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/thuanbui/source_code/react-mapbox-gl-spiderifier/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thuanbui/source_code/react-mapbox-gl-spiderifier/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thuanbui/source_code/react-mapbox-gl-spiderifier/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thuanbui/source_code/react-mapbox-gl-spiderifier/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _get from \"/Users/thuanbui/source_code/react-mapbox-gl-spiderifier/node_modules/@babel/runtime/helpers/esm/get\";\nimport _inherits from \"/Users/thuanbui/source_code/react-mapbox-gl-spiderifier/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport classnames from \"classnames\";\nimport _ from \"lodash\";\nimport { isReactComponent } from \"../../common/utils\";\nimport { MarkerLayer } from \"../MarkerLayer\";\n\nvar SpiderifierElement =\n/*#__PURE__*/\nfunction (_MarkerLayer) {\n  _inherits(SpiderifierElement, _MarkerLayer);\n\n  function SpiderifierElement(props) {\n    var _this;\n\n    _classCallCheck(this, SpiderifierElement);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SpiderifierElement).call(this, props));\n\n    _this.setChildRef = function (childRef) {\n      return _this.childRef = _this.childRef || childRef;\n    };\n\n    _this.state = {\n      animateClass: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(SpiderifierElement, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      var animate = this.props.animate;\n      this.setState({\n        animateClass: classnames({\n          \"animate initial\": animate\n        })\n      });\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return !_.isEqual(this.props, nextProps) || !_.isEqual(this.state, nextState);\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      _get(_getPrototypeOf(SpiderifierElement.prototype), \"componentDidMount\", this).call(this);\n\n      if (this._animationEnabled()) {\n        _.delay(function () {\n          return _this2.setState({\n            animateClass: \"animate\"\n          });\n        }, 0);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.attachChildren();\n    }\n  }, {\n    key: \"getStyle\",\n    value: function getStyle(props) {\n      var shouldRenderLeg = props.shouldRenderLeg,\n          x = props.x,\n          y = props.y,\n          style = props.style;\n      var marginLeft = \"\";\n      var marginTop = \"\";\n      var transitionDelay = \"\";\n\n      if (shouldRenderLeg) {\n        marginLeft = \"\".concat(x, \"px\");\n        marginTop = \"\".concat(y, \"px\");\n        transitionDelay = this._getTransitionDelay(props);\n      }\n\n      return _objectSpread({}, style, {\n        marginLeft: marginLeft,\n        marginTop: marginTop,\n        transitionDelay: transitionDelay\n      });\n    }\n  }, {\n    key: \"getContainerClassName\",\n    value: function getContainerClassName(props) {\n      var animateClass = this.state.animateClass;\n      var className = props.className,\n          y = props.y;\n      return classnames(\"spidered-marker\", className, animateClass, {\n        top: y <= 0,\n        bottom: y > 0\n      });\n    }\n  }, {\n    key: \"getContent\",\n    value: function getContent(props) {\n      var shouldRenderLeg = props.shouldRenderLeg;\n      return React.createElement(\"div\", null, React.createElement(\"div\", {\n        className: \"icon-div\"\n      }, this._getDecorateChildren(props)), shouldRenderLeg && React.createElement(\"div\", {\n        className: \"line-div\",\n        style: this._getLegStyles(props)\n      }));\n    }\n  }, {\n    key: \"getOffset\",\n    value: function getOffset() {\n      var _this$props = this.props,\n          shouldRenderLeg = _this$props.shouldRenderLeg,\n          x = _this$props.x,\n          y = _this$props.y;\n      return shouldRenderLeg ? [x, y] : [0, 0];\n    }\n  }, {\n    key: \"getProperties\",\n    value: function getProperties() {\n      if (this.props.children) {\n        return this.props.children.props.properties;\n      }\n\n      return {};\n    }\n  }, {\n    key: \"_animationEnabled\",\n    value: function _animationEnabled() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var animate = props.animate;\n      return animate;\n    }\n  }, {\n    key: \"_getDecorateChildren\",\n    value: function _getDecorateChildren(props) {\n      var _this3 = this;\n\n      var children = props.children,\n          coordinates = props.coordinates;\n      return React.Children.map(children, function (child) {\n        if (isReactComponent(child)) {\n          return React.cloneElement(child, {\n            coordinates: coordinates,\n            offset: _this3.getOffset(),\n            ref: _this3.setChildRef,\n            mapBox: _this3.getMapInstance()\n          });\n        }\n\n        return child;\n      });\n    }\n  }, {\n    key: \"_getLegStyles\",\n    value: function _getLegStyles(props) {\n      var legLength = props.legLength,\n          angle = props.angle,\n          legStyles = props.legStyles;\n      return _objectSpread({}, legStyles, {\n        height: legLength,\n        transform: \"rotate(\".concat(angle - Math.PI / 2, \"rad)\"),\n        transitionDelay: this._getTransitionDelay(props)\n      });\n    }\n  }, {\n    key: \"_getTransitionDelay\",\n    value: function _getTransitionDelay(props) {\n      var animate = props.animate,\n          transitionDelay = props.transitionDelay;\n      return animate ? \"\".concat(transitionDelay, \"s\") : \"\";\n    }\n  }]);\n\n  return SpiderifierElement;\n}(MarkerLayer);\n\nSpiderifierElement.displayName = \"SpiderifierElement\";\nSpiderifierElement.propTypes = _objectSpread({}, MarkerLayer.propTypes, {\n  angle: PropTypes.number,\n  animate: PropTypes.bool,\n  legLength: PropTypes.number,\n  legStyles: PropTypes.object,\n  index: PropTypes.number,\n  shouldRenderLeg: PropTypes.bool,\n  transitionDelay: PropTypes.number,\n  x: PropTypes.number,\n  y: PropTypes.number\n});\nSpiderifierElement.defaultProps = {\n  animate: true,\n  transitionDelay: 200\n};\nexport default SpiderifierElement;","map":null,"metadata":{},"sourceType":"module"}