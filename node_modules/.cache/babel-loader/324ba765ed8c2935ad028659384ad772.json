{"ast":null,"code":"import _classCallCheck from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/src/components/PlaylistContainer.js\";\nimport React from 'react';\nimport { Route, withRouter } from 'react-router-dom';\nimport PlaylistCard from './PlaylistCard';\n\nvar PlaylistContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PlaylistContainer, _React$Component);\n\n  function PlaylistContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, PlaylistContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(PlaylistContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      playlistsArr: [] // first check if there is a user if there is fetch the data and display it on the page\n      // else push to the login\n      //this.state.playlistsArr.playlists[0].links.tracks\n\n    };\n\n    _this.componentDidMount = function () {\n      Object.keys(_this.props.user).length > 0 ? fetch(\"http://api.napster.com/v2.2/playlists/top?apikey=MTU1YjllNjUtOTIwNi00MGJlLWJlOWMtZGYxMjJhZDI0NTk5\").then(function (resp) {\n        return resp.json();\n      }).then(function (playlistObj) {\n        return _this.setState({\n          playlistsArr: playlistObj.playlists\n        });\n      }) : _this.props.history.push(\"/login\");\n    };\n\n    _this.renderPlaylistCard = function () {\n      var playlists = _this.state.playlistsArr;\n      console.log('all of the playlists', _this.state.playlistsArr);\n\n      if (playlists.length > 0) {\n        var _newArr = playlists.map(function (playlist) {\n          return React.createElement(PlaylistCard, {\n            playlist: playlist,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 30\n            },\n            __self: this\n          });\n        });\n      } else {\n        return React.createElement(\"h1\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 33\n          },\n          __self: this\n        }, \"No data\");\n      }\n\n      return newArr;\n    };\n\n    return _this;\n  }\n\n  _createClass(PlaylistContainer, [{\n    key: \"render\",\n    //render has it's own props => console.log(\"render props\", renderProps.match.params.name );\n    // render takes in a callback function\n    // <Route path=\"/playlists/:name\" render={() =>{} PlaylistCard}>\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43\n        },\n        __self: this\n      }, \"Playlist Container\"), this.renderPlaylistCard());\n    }\n  }]);\n\n  return PlaylistContainer;\n}(React.Component);\n\nexport default withRouter(PlaylistContainer);","map":{"version":3,"sources":["/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/src/components/PlaylistContainer.js"],"names":["React","Route","withRouter","PlaylistCard","PlaylistContainer","state","playlistsArr","componentDidMount","Object","keys","props","user","length","fetch","then","resp","json","playlistObj","setState","playlists","history","push","renderPlaylistCard","console","log","newArr","map","playlist","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,EAAgBC,UAAhB,QAAkC,kBAAlC;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;IAEMC,iB;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,YAAY,EAAE,EADR,CAKV;AACA;AACA;;AAPU,K;;UAQRC,iB,GAAoB,YAAM;AACxBC,MAAAA,MAAM,CAACC,IAAP,CAAY,MAAKC,KAAL,CAAWC,IAAvB,EAA6BC,MAA7B,GAAsC,CAAtC,GACEC,KAAK,CAAC,mGAAD,CAAL,CACDC,IADC,CACI,UAAAC,IAAI;AAAA,eAAIA,IAAI,CAACC,IAAL,EAAJ;AAAA,OADR,EAEDF,IAFC,CAEI,UAAAG,WAAW;AAAA,eAAI,MAAKC,QAAL,CAAc;AACjCZ,UAAAA,YAAY,EAAEW,WAAW,CAACE;AADO,SAAd,CAAJ;AAAA,OAFf,CADF,GAOE,MAAKT,KAAL,CAAWU,OAAX,CAAmBC,IAAnB,CAAwB,QAAxB,CAPF;AAQD,K;;UAEDC,kB,GAAqB,YAAM;AACzB,UAAMH,SAAS,GAAG,MAAKd,KAAL,CAAWC,YAA7B;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC,MAAKnB,KAAL,CAAWC,YAA/C;;AACA,UAAIa,SAAS,CAACP,MAAV,GAAmB,CAAvB,EAA0B;AACxB,YAAMa,OAAM,GAAGN,SAAS,CAACO,GAAV,CAAe,UAAAC,QAAQ,EAAI;AAC1C,iBAAO,oBAAC,YAAD;AAAc,YAAA,QAAQ,EAAEA,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACC,SAFc,CAAf;AAGD,OAJD,MAIM;AACJ,eAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AACD;;AACD,aAAOF,MAAP;AACD,K;;;;;;;AACD;AACA;AACA;6BACQ;AACN,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BADF,EAEG,KAAKH,kBAAL,EAFH,CADF;AAMD;;;;EA1C6BtB,KAAK,CAAC4B,S;;AA6CtC,eAAe1B,UAAU,CAACE,iBAAD,CAAzB","sourcesContent":["import React from 'react';\nimport { Route, withRouter } from 'react-router-dom';\nimport PlaylistCard from './PlaylistCard';\n\nclass PlaylistContainer extends React.Component{\n  state = {\n    playlistsArr: []\n  }\n\n\n// first check if there is a user if there is fetch the data and display it on the page\n// else push to the login\n//this.state.playlistsArr.playlists[0].links.tracks\n  componentDidMount = () => {\n    Object.keys(this.props.user).length > 0\n    ? fetch(\"http://api.napster.com/v2.2/playlists/top?apikey=MTU1YjllNjUtOTIwNi00MGJlLWJlOWMtZGYxMjJhZDI0NTk5\")\n    .then(resp => resp.json())\n    .then(playlistObj => this.setState({\n      playlistsArr: playlistObj.playlists\n    })\n    )\n    : this.props.history.push(\"/login\")\n  }\n\n  renderPlaylistCard = () => {\n    const playlists = this.state.playlistsArr\n    console.log('all of the playlists', this.state.playlistsArr);\n    if (playlists.length > 0) {\n      const newArr = playlists.map( playlist => {\n      return <PlaylistCard playlist={playlist}/>\n      })\n    }else {\n      return <h1>No data</h1>\n    }\n    return newArr\n  }\n  //render has it's own props => console.log(\"render props\", renderProps.match.params.name );\n  // render takes in a callback function\n  // <Route path=\"/playlists/:name\" render={() =>{} PlaylistCard}>\n  render(){\n    return(\n      <div>\n        <h1>Playlist Container</h1>\n        {this.renderPlaylistCard()}\n      </div>\n    )\n  }\n}\n\nexport default withRouter(PlaylistContainer);\n"]},"metadata":{},"sourceType":"module"}