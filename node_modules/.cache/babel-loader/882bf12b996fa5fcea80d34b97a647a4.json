{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar ChunkedFileData = require('./ChunkedFileData');\n\nvar MediaFileReader = require('./MediaFileReader');\n\nvar CHUNK_SIZE = 1024;\n\nvar XhrFileReader = function (_MediaFileReader) {\n  _inherits(XhrFileReader, _MediaFileReader);\n\n  function XhrFileReader(url) {\n    _classCallCheck(this, XhrFileReader);\n\n    var _this = _possibleConstructorReturn(this, (XhrFileReader.__proto__ || Object.getPrototypeOf(XhrFileReader)).call(this));\n\n    _this._url = url;\n    _this._fileData = new ChunkedFileData();\n    return _this;\n  }\n\n  _createClass(XhrFileReader, [{\n    key: '_init',\n    value: function _init(callbacks) {\n      if (XhrFileReader._config.avoidHeadRequests) {\n        this._fetchSizeWithGetRequest(callbacks);\n      } else {\n        this._fetchSizeWithHeadRequest(callbacks);\n      }\n    }\n  }, {\n    key: '_fetchSizeWithHeadRequest',\n    value: function _fetchSizeWithHeadRequest(callbacks) {\n      var self = this;\n\n      this._makeXHRRequest(\"HEAD\", null, {\n        onSuccess: function onSuccess(xhr) {\n          var contentLength = self._parseContentLength(xhr);\n\n          if (contentLength) {\n            self._size = contentLength;\n            callbacks.onSuccess();\n          } else {\n            // Content-Length not provided by the server, fallback to\n            // GET requests.\n            self._fetchSizeWithGetRequest(callbacks);\n          }\n        },\n        onError: callbacks.onError\n      });\n    }\n  }, {\n    key: '_fetchSizeWithGetRequest',\n    value: function _fetchSizeWithGetRequest(callbacks) {\n      var self = this;\n\n      var range = this._roundRangeToChunkMultiple([0, 0]);\n\n      this._makeXHRRequest(\"GET\", range, {\n        onSuccess: function onSuccess(xhr) {\n          var contentRange = self._parseContentRange(xhr);\n\n          var data = self._getXhrResponseContent(xhr);\n\n          if (contentRange) {\n            if (contentRange.instanceLength == null) {\n              // Last resort, server is not able to tell us the content length,\n              // need to fetch entire file then.\n              self._fetchEntireFile(callbacks);\n\n              return;\n            }\n\n            self._size = contentRange.instanceLength;\n          } else {\n            // Range request not supported, we got the entire file\n            self._size = data.length;\n          }\n\n          self._fileData.addData(0, data);\n\n          callbacks.onSuccess();\n        },\n        onError: callbacks.onError\n      });\n    }\n  }, {\n    key: '_fetchEntireFile',\n    value: function _fetchEntireFile(callbacks) {\n      var self = this;\n\n      this._makeXHRRequest(\"GET\", null, {\n        onSuccess: function onSuccess(xhr) {\n          var data = self._getXhrResponseContent(xhr);\n\n          self._size = data.length;\n\n          self._fileData.addData(0, data);\n\n          callbacks.onSuccess();\n        },\n        onError: callbacks.onError\n      });\n    }\n  }, {\n    key: '_getXhrResponseContent',\n    value: function _getXhrResponseContent(xhr) {\n      return xhr.responseBody || xhr.responseText || \"\";\n    }\n  }, {\n    key: '_parseContentLength',\n    value: function _parseContentLength(xhr) {\n      var contentLength = this._getResponseHeader(xhr, \"Content-Length\");\n\n      if (contentLength == null) {\n        return contentLength;\n      } else {\n        return parseInt(contentLength, 10);\n      }\n    }\n  }, {\n    key: '_parseContentRange',\n    value: function _parseContentRange(xhr) {\n      var contentRange = this._getResponseHeader(xhr, \"Content-Range\");\n\n      if (contentRange) {\n        var parsedContentRange = contentRange.match(/bytes (\\d+)-(\\d+)\\/(?:(\\d+)|\\*)/i);\n\n        if (!parsedContentRange) {\n          throw new Error(\"FIXME: Unknown Content-Range syntax: \" + contentRange);\n        }\n\n        return {\n          firstBytePosition: parseInt(parsedContentRange[1], 10),\n          lastBytePosition: parseInt(parsedContentRange[2], 10),\n          instanceLength: parsedContentRange[3] ? parseInt(parsedContentRange[3], 10) : null\n        };\n      } else {\n        return null;\n      }\n    }\n  }, {\n    key: 'loadRange',\n    value: function loadRange(range, callbacks) {\n      var self = this;\n\n      if (self._fileData.hasDataRange(range[0], Math.min(self._size, range[1]))) {\n        setTimeout(callbacks.onSuccess, 1);\n        return;\n      } // Always download in multiples of CHUNK_SIZE. If we're going to make a\n      // request might as well get a chunk that makes sense. The big cost is\n      // establishing the connection so getting 10bytes or 1K doesn't really\n      // make a difference.\n\n\n      range = this._roundRangeToChunkMultiple(range); // Upper range should not be greater than max file size\n\n      range[1] = Math.min(self._size, range[1]);\n\n      this._makeXHRRequest(\"GET\", range, {\n        onSuccess: function onSuccess(xhr) {\n          var data = self._getXhrResponseContent(xhr);\n\n          self._fileData.addData(range[0], data);\n\n          callbacks.onSuccess();\n        },\n        onError: callbacks.onError\n      });\n    }\n  }, {\n    key: '_roundRangeToChunkMultiple',\n    value: function _roundRangeToChunkMultiple(range) {\n      var length = range[1] - range[0] + 1;\n      var newLength = Math.ceil(length / CHUNK_SIZE) * CHUNK_SIZE;\n      return [range[0], range[0] + newLength - 1];\n    }\n  }, {\n    key: '_makeXHRRequest',\n    value: function _makeXHRRequest(method, range, callbacks) {\n      var xhr = this._createXHRObject();\n\n      xhr.open(method, this._url);\n\n      var onXHRLoad = function onXHRLoad() {\n        // 200 - OK\n        // 206 - Partial Content\n        // $FlowIssue - xhr will not be null here\n        if (xhr.status === 200 || xhr.status === 206) {\n          callbacks.onSuccess(xhr);\n        } else if (callbacks.onError) {\n          callbacks.onError({\n            \"type\": \"xhr\",\n            \"info\": \"Unexpected HTTP status \" + xhr.status + \".\",\n            \"xhr\": xhr\n          });\n        }\n\n        xhr = null;\n      };\n\n      if (typeof xhr.onload !== 'undefined') {\n        xhr.onload = onXHRLoad;\n\n        xhr.onerror = function () {\n          if (callbacks.onError) {\n            callbacks.onError({\n              \"type\": \"xhr\",\n              \"info\": \"Generic XHR error, check xhr object.\",\n              \"xhr\": xhr\n            });\n          }\n        };\n      } else {\n        xhr.onreadystatechange = function () {\n          // $FlowIssue - xhr will not be null here\n          if (xhr.readyState === 4) {\n            onXHRLoad();\n          }\n        };\n      }\n\n      if (XhrFileReader._config.timeoutInSec) {\n        xhr.timeout = XhrFileReader._config.timeoutInSec * 1000;\n\n        xhr.ontimeout = function () {\n          if (callbacks.onError) {\n            callbacks.onError({\n              \"type\": \"xhr\",\n              // $FlowIssue - xhr.timeout will not be null\n              \"info\": \"Timeout after \" + xhr.timeout / 1000 + \"s. Use jsmediatags.Config.setXhrTimeout to override.\",\n              \"xhr\": xhr\n            });\n          }\n        };\n      }\n\n      xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n\n      if (range) {\n        this._setRequestHeader(xhr, \"Range\", \"bytes=\" + range[0] + \"-\" + range[1]);\n      }\n\n      this._setRequestHeader(xhr, \"If-Modified-Since\", \"Sat, 01 Jan 1970 00:00:00 GMT\");\n\n      xhr.send(null);\n    }\n  }, {\n    key: '_setRequestHeader',\n    value: function _setRequestHeader(xhr, headerName, headerValue) {\n      if (XhrFileReader._config.disallowedXhrHeaders.indexOf(headerName.toLowerCase()) < 0) {\n        xhr.setRequestHeader(headerName, headerValue);\n      }\n    }\n  }, {\n    key: '_hasResponseHeader',\n    value: function _hasResponseHeader(xhr, headerName) {\n      var allResponseHeaders = xhr.getAllResponseHeaders();\n\n      if (!allResponseHeaders) {\n        return false;\n      }\n\n      var headers = allResponseHeaders.split(\"\\r\\n\");\n      var headerNames = [];\n\n      for (var i = 0; i < headers.length; i++) {\n        headerNames[i] = headers[i].split(\":\")[0].toLowerCase();\n      }\n\n      return headerNames.indexOf(headerName.toLowerCase()) >= 0;\n    }\n  }, {\n    key: '_getResponseHeader',\n    value: function _getResponseHeader(xhr, headerName) {\n      if (!this._hasResponseHeader(xhr, headerName)) {\n        return null;\n      }\n\n      return xhr.getResponseHeader(headerName);\n    }\n  }, {\n    key: 'getByteAt',\n    value: function getByteAt(offset) {\n      var character = this._fileData.getByteAt(offset);\n\n      return character.charCodeAt(0) & 0xff;\n    }\n  }, {\n    key: '_isWebWorker',\n    value: function _isWebWorker() {\n      return typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope;\n    }\n  }, {\n    key: '_createXHRObject',\n    value: function _createXHRObject() {\n      if (typeof window === \"undefined\" && !this._isWebWorker()) {\n        // $FlowIssue - flow is not able to recognize this module.\n        return new (require(\"xhr2\").XMLHttpRequest)();\n      }\n\n      if (typeof XMLHttpRequest !== \"undefined\") {\n        return new XMLHttpRequest();\n      }\n\n      throw new Error(\"XMLHttpRequest is not supported\");\n    }\n  }], [{\n    key: 'canReadFile',\n    value: function canReadFile(file) {\n      return typeof file === 'string' && /^[a-z]+:\\/\\//i.test(file);\n    }\n  }, {\n    key: 'setConfig',\n    value: function setConfig(config) {\n      for (var key in config) {\n        if (config.hasOwnProperty(key)) {\n          this._config[key] = config[key];\n        }\n      }\n\n      var disallowedXhrHeaders = this._config.disallowedXhrHeaders;\n\n      for (var i = 0; i < disallowedXhrHeaders.length; i++) {\n        disallowedXhrHeaders[i] = disallowedXhrHeaders[i].toLowerCase();\n      }\n    }\n  }]);\n\n  return XhrFileReader;\n}(MediaFileReader);\n\nXhrFileReader._config = {\n  avoidHeadRequests: false,\n  disallowedXhrHeaders: [],\n  timeoutInSec: 30\n};\nmodule.exports = XhrFileReader;","map":null,"metadata":{},"sourceType":"script"}