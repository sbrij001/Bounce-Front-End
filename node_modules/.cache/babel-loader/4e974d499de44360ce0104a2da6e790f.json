{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar MediaFileReader = require('./MediaFileReader');\n\nvar MediaTagReader = function () {\n  function MediaTagReader(mediaFileReader) {\n    _classCallCheck(this, MediaTagReader);\n\n    this._mediaFileReader = mediaFileReader;\n    this._tags = null;\n  }\n  /**\n   * Returns the byte range that needs to be loaded and fed to\n   * _canReadTagFormat in order to identify if the file contains tag\n   * information that can be read.\n   */\n\n\n  _createClass(MediaTagReader, [{\n    key: 'setTagsToRead',\n    value: function setTagsToRead(tags) {\n      this._tags = tags;\n      return this;\n    }\n  }, {\n    key: 'read',\n    value: function read(callbacks) {\n      var self = this;\n\n      this._mediaFileReader.init({\n        onSuccess: function onSuccess() {\n          self._loadData(self._mediaFileReader, {\n            onSuccess: function onSuccess() {\n              try {\n                var tags = self._parseData(self._mediaFileReader, self._tags);\n              } catch (ex) {\n                if (callbacks.onError) {\n                  callbacks.onError({\n                    \"type\": \"parseData\",\n                    \"info\": ex.message\n                  });\n                  return;\n                }\n              } // TODO: destroy mediaFileReader\n\n\n              callbacks.onSuccess(tags);\n            },\n            onError: callbacks.onError\n          });\n        },\n        onError: callbacks.onError\n      });\n    }\n  }, {\n    key: 'getShortcuts',\n    value: function getShortcuts() {\n      return {};\n    }\n    /**\n     * Load the necessary bytes from the media file.\n     */\n\n  }, {\n    key: '_loadData',\n    value: function _loadData(mediaFileReader, callbacks) {\n      throw new Error(\"Must implement _loadData function\");\n    }\n    /**\n     * Parse the loaded data to read the media tags.\n     */\n\n  }, {\n    key: '_parseData',\n    value: function _parseData(mediaFileReader, tags) {\n      throw new Error(\"Must implement _parseData function\");\n    }\n  }, {\n    key: '_expandShortcutTags',\n    value: function _expandShortcutTags(tagsWithShortcuts) {\n      if (!tagsWithShortcuts) {\n        return null;\n      }\n\n      var tags = [];\n      var shortcuts = this.getShortcuts();\n\n      for (var i = 0, tagOrShortcut; tagOrShortcut = tagsWithShortcuts[i]; i++) {\n        tags = tags.concat(shortcuts[tagOrShortcut] || [tagOrShortcut]);\n      }\n\n      return tags;\n    }\n  }], [{\n    key: 'getTagIdentifierByteRange',\n    value: function getTagIdentifierByteRange() {\n      throw new Error(\"Must implement\");\n    }\n    /**\n     * Given a tag identifier (read from the file byte positions speficied by\n     * getTagIdentifierByteRange) this function checks if it can read the tag\n     * format or not.\n     */\n\n  }, {\n    key: 'canReadTagFormat',\n    value: function canReadTagFormat(tagIdentifier) {\n      throw new Error(\"Must implement\");\n    }\n  }]);\n\n  return MediaTagReader;\n}();\n\nmodule.exports = MediaTagReader;","map":null,"metadata":{},"sourceType":"script"}