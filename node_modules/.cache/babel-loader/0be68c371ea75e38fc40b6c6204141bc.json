{"ast":null,"code":"import _objectSpread from \"/Users/thuanbui/source_code/react-mapbox-gl-spiderifier/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/Users/thuanbui/source_code/react-mapbox-gl-spiderifier/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/thuanbui/source_code/react-mapbox-gl-spiderifier/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/thuanbui/source_code/react-mapbox-gl-spiderifier/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/thuanbui/source_code/react-mapbox-gl-spiderifier/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/thuanbui/source_code/react-mapbox-gl-spiderifier/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport React, { Children, Component } from \"react\";\nimport _ from \"lodash\";\nimport { checkPropsChange, extractEventHandlers } from \"../../common/utils\";\nimport SpiderifierElement from \"./SpiderifierElement\";\nimport { TwoPi } from \"./constants\";\nimport \"./MapboxGlSpiderifier.css\";\n\nvar MapboxGlSpiderifier =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapboxGlSpiderifier, _Component);\n\n  function MapboxGlSpiderifier(props) {\n    var _this;\n\n    _classCallCheck(this, MapboxGlSpiderifier);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(MapboxGlSpiderifier).call(this, props));\n    _this.state = {\n      spiderParams: null\n    };\n    return _this;\n  }\n\n  _createClass(MapboxGlSpiderifier, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        spiderParams: this._generateSpiderParams()\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this._updateSpiderParams(nextProps);\n    }\n  }, {\n    key: \"_generateCircleParams\",\n    value: function _generateCircleParams(props) {\n      var _this2 = this;\n\n      var count = this._getMarkersCount(props);\n\n      var circleFootSeparation = props.circleFootSeparation;\n      var circumference = circleFootSeparation * (2 + count);\n      var legLength = circumference / TwoPi; // = radius from circumference\n\n      var angleStep = TwoPi / count;\n      return _.times(count, function (index) {\n        var angle = index * angleStep;\n        return _objectSpread({}, _this2._getSpiderPosition(props, legLength, angle), {\n          index: index,\n          transitionDelay: _this2._getTransitionDelay(props, index)\n        });\n      });\n    }\n  }, {\n    key: \"_generateSpiderParams\",\n    value: function _generateSpiderParams() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var circleSpiralSwitchover = props.circleSpiralSwitchover,\n          animate = props.animate,\n          animationSpeed = props.animationSpeed,\n          showingLegs = props.showingLegs;\n\n      var count = this._getMarkersCount(props);\n\n      if (!count) {\n        return null;\n      }\n\n      var shouldRenderLeg = count > 1 || showingLegs;\n      var markersProps = count >= circleSpiralSwitchover ? this._generateSpiralParams(props) : this._generateCircleParams(props);\n      return markersProps.map(function (markerProp) {\n        return _objectSpread({}, markerProp, {\n          animate: animate,\n          animationSpeed: animationSpeed,\n          shouldRenderLeg: shouldRenderLeg\n        });\n      });\n    }\n  }, {\n    key: \"_generateSpiralParams\",\n    value: function _generateSpiralParams(props) {\n      var _this3 = this;\n\n      var count = this._getMarkersCount(props);\n\n      var spiralFootSeparation = props.spiralFootSeparation,\n          spiralLengthFactor = props.spiralLengthFactor,\n          spiralLengthStart = props.spiralLengthStart;\n      var angle = 0;\n      var legLength = spiralLengthStart;\n      return _.times(count, function (index) {\n        angle = angle + (spiralFootSeparation / legLength + index * 0.0005);\n        legLength = legLength + TwoPi * spiralLengthFactor / angle;\n        return _objectSpread({}, _this3._getSpiderPosition(props, legLength, angle), {\n          index: index,\n          transitionDelay: _this3._getTransitionDelay(props, index),\n          style: {\n            zIndex: count - index\n          }\n        });\n      });\n    }\n  }, {\n    key: \"_getNotNullChildren\",\n    value: function _getNotNullChildren() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var children = props.children;\n      return Children.toArray(children).filter(function (child) {\n        return child !== null;\n      });\n    }\n  }, {\n    key: \"_getMarkersCount\",\n    value: function _getMarkersCount(props) {\n      var children = this._getNotNullChildren(props);\n\n      return children.length;\n    }\n  }, {\n    key: \"_getSpiderifierMarkers\",\n    value: function _getSpiderifierMarkers() {\n      var spiderParams = this.state.spiderParams;\n\n      if (!spiderParams) {\n        return null;\n      }\n\n      var coordinates = this.props.coordinates;\n      var eventHanders = extractEventHandlers(this.props);\n      return this._getNotNullChildren().map(function (child, index) {\n        var params = spiderParams[index];\n        var legStyles = child.props.legStyles;\n\n        if (params) {\n          return React.createElement(SpiderifierElement, Object.assign({\n            key: index,\n            coordinates: coordinates,\n            legStyles: legStyles\n          }, params, eventHanders), child);\n        }\n\n        return null;\n      });\n    }\n  }, {\n    key: \"_getSpiderPosition\",\n    value: function _getSpiderPosition(props, legLength, angle) {\n      var transformSpiderLeft = props.transformSpiderLeft,\n          transformSpiderTop = props.transformSpiderTop;\n      return {\n        angle: angle,\n        legLength: legLength - transformSpiderLeft,\n        x: legLength * Math.cos(angle) + transformSpiderLeft,\n        y: legLength * Math.sin(angle) + transformSpiderTop\n      };\n    }\n  }, {\n    key: \"_getTransitionDelay\",\n    value: function _getTransitionDelay(props, index) {\n      var markersCount = this._getMarkersCount(props);\n\n      var animationSpeed = props.animationSpeed;\n      return animationSpeed / 1000 / markersCount * index;\n    }\n  }, {\n    key: \"_updateSpiderParams\",\n    value: function _updateSpiderParams(nextProps) {\n      if (checkPropsChange(this.props, nextProps, [\"children\", \"circleFootSeparation\", \"circleSpiralSwitchover\", \"spiralFootSeparation\", \"spiralLengthStart\", \"spiralLengthFactor\", \"transformSpiderLeft\", \"showingLegs\"], _.isEqual)) {\n        this.setState({\n          spiderParams: this._generateSpiderParams(nextProps)\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this._getSpiderifierMarkers();\n    }\n  }]);\n\n  return MapboxGlSpiderifier;\n}(Component);\n\nMapboxGlSpiderifier.displayName = \"MapboxGlSpiderifier\";\nMapboxGlSpiderifier.defaultProps = {\n  circleSpiralSwitchover: 9,\n  circleFootSeparation: 90,\n  spiralFootSeparation: 80,\n  spiralLengthStart: 60,\n  spiralLengthFactor: 5,\n  animate: true,\n  animationSpeed: 500,\n  transformSpiderLeft: 0,\n  transformSpiderTop: 0,\n  showingLegs: false\n};\nexport default MapboxGlSpiderifier;","map":null,"metadata":{},"sourceType":"module"}