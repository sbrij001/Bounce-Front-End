{"ast":null,"code":"import _classCallCheck from \"/Users/shivanibrijmohan/Development/code/Flatiron Projects/bounce-front-end/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/shivanibrijmohan/Development/code/Flatiron Projects/bounce-front-end/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/shivanibrijmohan/Development/code/Flatiron Projects/bounce-front-end/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/shivanibrijmohan/Development/code/Flatiron Projects/bounce-front-end/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/shivanibrijmohan/Development/code/Flatiron Projects/bounce-front-end/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/shivanibrijmohan/Development/code/Flatiron Projects/bounce-front-end/src/components/Wavelength.js\";\nimport React from 'react';\nimport { withRouter } from 'react-router-dom';\n\nvar Wavelength =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Wavelength, _React$Component);\n\n  function Wavelength() {\n    _classCallCheck(this, Wavelength);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Wavelength).apply(this, arguments));\n  }\n\n  _createClass(Wavelength, [{\n    key: \"render\",\n    value: function render() {\n      setTimeout(function () {\n        var realtimeCanvas = document.getElementById('waveform-realtime');\n        var recordingCanvas = document.getElementById('waveform-recording'); // var recordingContainer = document.getElementById('recording-container');\n        // var mediaRecorderDataChunks = [];\n\n        var gotUserAudio = function gotUserAudio(stream) {\n          var audioCtx = new AudioContext();\n          var source = audioCtx.createMediaStreamSource(stream);\n          var analyser = audioCtx.createAnalyser();\n          source.connect(analyser); // var drawVisual;\n\n          visualizeRealtime(stream, realtimeCanvas);\n          visualizeRecording(stream, recordingCanvas); // visualize realtime waveform\n\n          function visualizeRealtime(stream, canvas) {\n            var canvasCtx = canvas.getContext('2d');\n            analyser.fftSize = 2048;\n            var bufferLength = analyser.frequencyBinCount; // half the FFT value\n\n            var dataArray = new Uint8Array(bufferLength); // create an array to store the data\n\n            canvasCtx.clearRect(0, 0, canvas.width, canvas.height);\n\n            function draw() {\n              drawVisual = requestAnimationFrame(draw);\n              analyser.getByteTimeDomainData(dataArray);\n              canvasCtx.fillStyle = '#1A1629';\n              canvasCtx.fillRect(0, 0, canvas.width, canvas.height);\n              canvasCtx.lineWidth = 1;\n              canvasCtx.strokeStyle = '#FFF';\n              canvasCtx.beginPath();\n              var sliceWidth = canvas.width * 1.0 / bufferLength;\n              var x = 0;\n\n              for (var i = 0; i < bufferLength; i++) {\n                var v = dataArray[i] / 128.0;\n                var y = v * canvas.height / 2;\n\n                if (i === 0) {\n                  canvasCtx.moveTo(x, y);\n                } else {\n                  canvasCtx.lineTo(x, y);\n                }\n\n                x += sliceWidth;\n              }\n\n              canvasCtx.lineTo(canvas.width, canvas.height / 2);\n              canvasCtx.stroke();\n            }\n\n            ;\n            draw();\n          } // visualize stream audio recording style\n\n\n          function visualizeRecording(stream, canvas) {\n            var canvasCtx = canvas.getContext('2d');\n            analyser.fftSize = 2048;\n            var bufferLength = analyser.frequencyBinCount;\n            var dataArray = new Float32Array(bufferLength);\n            canvasCtx.clearRect(0, 0, canvas.width, canvas.height);\n            canvasCtx.fillStyle = '#1A1629';\n            canvasCtx.fillRect(0, 0, canvas.width, canvas.height);\n            var x = 0;\n\n            function draw() {\n              if (x >= canvas.width) {\n                var tempWave = canvas.toDataURL('image/png');\n                var img = new Image();\n\n                img.onload = function () {\n                  // set canvas size\n                  canvas.width++;\n                  canvasCtx.fillStyle = '#1A1629';\n                  canvasCtx.fillRect(0, 0, canvas.width, canvas.height);\n                  canvasCtx.drawImage(img, 0, 0); // todo make sure canvas is inside div and scrolled to end\n\n                  strokeWave();\n                };\n\n                img.src = tempWave;\n              } else {\n                strokeWave();\n              }\n            }\n\n            ;\n            draw();\n\n            function strokeWave() {\n              drawVisual = requestAnimationFrame(draw);\n              analyser.getFloatTimeDomainData(dataArray);\n              canvasCtx.lineWidth = 1;\n              canvasCtx.strokeStyle = '#fff';\n              canvasCtx.beginPath();\n\n              for (var i = 0; i < bufferLength; i++) {\n                var v = dataArray[i] * 128.0;\n                var y = canvas.height / 2 + v;\n                canvasCtx.lineTo(x, y);\n              }\n\n              canvasCtx.stroke();\n              x++;\n            }\n          }\n        }; // start stream on page load!\n\n\n        navigator.mediaDevices.getUserMedia({\n          audio: true,\n          video: false\n        }).then(gotUserAudio).catch(function (err) {\n          return console.log('gotLocalMediaStream error', err);\n        });\n      });\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        id: \"realtime-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"canvas\", {\n        id: \"waveform-realtime\",\n        width: \"290\",\n        height: \"20\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Wavelength;\n}(React.Component);\n\nexport default withRouter(Wavelength);","map":{"version":3,"sources":["/Users/shivanibrijmohan/Development/code/Flatiron Projects/bounce-front-end/src/components/Wavelength.js"],"names":["React","withRouter","Wavelength","setTimeout","realtimeCanvas","document","getElementById","recordingCanvas","gotUserAudio","stream","audioCtx","AudioContext","source","createMediaStreamSource","analyser","createAnalyser","connect","visualizeRealtime","visualizeRecording","canvas","canvasCtx","getContext","fftSize","bufferLength","frequencyBinCount","dataArray","Uint8Array","clearRect","width","height","draw","drawVisual","requestAnimationFrame","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","i","v","y","moveTo","lineTo","stroke","Float32Array","tempWave","toDataURL","img","Image","onload","drawImage","strokeWave","src","getFloatTimeDomainData","navigator","mediaDevices","getUserMedia","audio","video","then","catch","err","console","log","Component"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { withRouter } from 'react-router-dom';\n\n\nclass Wavelength extends React.Component {\n  render(){\n    setTimeout(() => {\n      var realtimeCanvas = document.getElementById('waveform-realtime');\n      var recordingCanvas = document.getElementById('waveform-recording');\n      // var recordingContainer = document.getElementById('recording-container');\n    // var mediaRecorderDataChunks = [];\n\n    var gotUserAudio = function(stream) {\n\n      var audioCtx = new AudioContext();\n      var source = audioCtx.createMediaStreamSource(stream);\n      var analyser = audioCtx.createAnalyser();\n      source.connect(analyser);\n\n      // var drawVisual;\n      visualizeRealtime(stream, realtimeCanvas);\n      visualizeRecording(stream, recordingCanvas);\n\n      // visualize realtime waveform\n      function visualizeRealtime(stream, canvas) {\n        var canvasCtx = canvas.getContext('2d');\n\n        analyser.fftSize = 2048;\n        var bufferLength = analyser.frequencyBinCount; // half the FFT value\n        var dataArray = new Uint8Array(bufferLength); // create an array to store the data\n\n        canvasCtx.clearRect(0, 0, canvas.width, canvas.height);\n\n        function draw() {\n          drawVisual = requestAnimationFrame(draw);\n\n          analyser.getByteTimeDomainData(dataArray);\n\n          canvasCtx.fillStyle = '#1A1629';\n          canvasCtx.fillRect(0, 0, canvas.width, canvas.height);\n          canvasCtx.lineWidth = 1;\n          canvasCtx.strokeStyle = '#FFF';\n          canvasCtx.beginPath();\n\n          var sliceWidth = canvas.width * 1.0 / bufferLength;\n          var x = 0;\n\n          for(var i = 0; i < bufferLength; i++) {\n\n            var v = dataArray[i] / 128.0;\n            var y = v * canvas.height/2;\n\n            if(i === 0) {\n              canvasCtx.moveTo(x, y);\n            } else {\n              canvasCtx.lineTo(x, y);\n            }\n\n            x += sliceWidth;\n          }\n\n          canvasCtx.lineTo(canvas.width, canvas.height/2);\n          canvasCtx.stroke();\n        };\n\n        draw();\n      }\n\n      // visualize stream audio recording style\n      function visualizeRecording(stream, canvas) {\n        var canvasCtx = canvas.getContext('2d');\n\n        analyser.fftSize = 2048;\n        var bufferLength = analyser.frequencyBinCount;\n        var dataArray = new Float32Array(bufferLength);\n\n        canvasCtx.clearRect(0, 0, canvas.width, canvas.height);\n        canvasCtx.fillStyle = '#1A1629';\n        canvasCtx.fillRect(0, 0, canvas.width, canvas.height);\n\n        var x = 0;\n\n        function draw() {\n          if ( x >= canvas.width ) {\n            var tempWave = canvas.toDataURL('image/png');\n            var img = new Image();\n            img.onload = function() {\n              // set canvas size\n              canvas.width++;\n              canvasCtx.fillStyle = '#1A1629';\n              canvasCtx.fillRect(0, 0, canvas.width, canvas.height);\n              canvasCtx.drawImage(img, 0, 0);\n\n              // todo make sure canvas is inside div and scrolled to end\n\n              strokeWave();\n            }\n            img.src = tempWave;\n          }\n          else {\n            strokeWave();\n          }\n        };\n\n        draw();\n\n        function strokeWave() {\n          drawVisual = requestAnimationFrame(draw);\n          analyser.getFloatTimeDomainData(dataArray);\n\n          canvasCtx.lineWidth = 1;\n          canvasCtx.strokeStyle = '#fff';\n          canvasCtx.beginPath();\n\n          for(var i = 0; i < bufferLength; i++) {\n            var v = dataArray[i] * 128.0;\n            var y = canvas.height/2 + v;\n            canvasCtx.lineTo(x, y);\n          }\n\n          canvasCtx.stroke();\n          x++;\n        }\n      }\n\n}\n\n// start stream on page load!\nnavigator.mediaDevices\n    .getUserMedia({ audio: true, video: false })\n    .then(gotUserAudio)\n    .catch(err => console.log('gotLocalMediaStream error', err));\n  })\nreturn(\n  <div>\n  <p id=\"realtime-container\">\n  <canvas id=\"waveform-realtime\" width=\"290\" height=\"20\"></canvas>\n  </p>\n  </div>\n)\n}\n}\nexport default withRouter(Wavelength);\n"]},"metadata":{},"sourceType":"module"}