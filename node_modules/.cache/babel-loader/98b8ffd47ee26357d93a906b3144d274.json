{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar fs = require('fs');\n\nvar ChunkedFileData = require('./ChunkedFileData');\n\nvar MediaFileReader = require('./MediaFileReader');\n\nvar NodeFileReader = function (_MediaFileReader) {\n  _inherits(NodeFileReader, _MediaFileReader);\n\n  function NodeFileReader(path) {\n    _classCallCheck(this, NodeFileReader);\n\n    var _this = _possibleConstructorReturn(this, (NodeFileReader.__proto__ || Object.getPrototypeOf(NodeFileReader)).call(this));\n\n    _this._path = path;\n    _this._fileData = new ChunkedFileData();\n    return _this;\n  }\n\n  _createClass(NodeFileReader, [{\n    key: 'getByteAt',\n    value: function getByteAt(offset) {\n      return this._fileData.getByteAt(offset);\n    }\n  }, {\n    key: '_init',\n    value: function _init(callbacks) {\n      var self = this;\n      fs.stat(self._path, function (err, stats) {\n        if (err) {\n          if (callbacks.onError) {\n            callbacks.onError({\n              \"type\": \"fs\",\n              \"info\": err\n            });\n          }\n        } else {\n          self._size = stats.size;\n          callbacks.onSuccess();\n        }\n      });\n    }\n  }, {\n    key: 'loadRange',\n    value: function loadRange(range, callbacks) {\n      var fd = -1;\n      var self = this;\n      var fileData = this._fileData;\n      var length = range[1] - range[0] + 1;\n      var onSuccess = callbacks.onSuccess;\n\n      var onError = callbacks.onError || function (object) {};\n\n      if (fileData.hasDataRange(range[0], range[1])) {\n        process.nextTick(onSuccess);\n        return;\n      }\n\n      var readData = function readData(err, _fd) {\n        if (err) {\n          onError({\n            \"type\": \"fs\",\n            \"info\": err\n          });\n          return;\n        }\n\n        fd = _fd; // TODO: Should create a pool of Buffer objects across all instances of\n        //       NodeFileReader. This is fine for now.\n\n        var buffer = new Buffer(length);\n        fs.read(_fd, buffer, 0, length, range[0], processData);\n      };\n\n      var processData = function processData(err, bytesRead, buffer) {\n        fs.close(fd, function (err) {\n          if (err) {\n            console.error(err);\n          }\n        });\n\n        if (err) {\n          onError({\n            \"type\": \"fs\",\n            \"info\": err\n          });\n          return;\n        }\n\n        storeBuffer(buffer);\n        onSuccess();\n      };\n\n      var storeBuffer = function storeBuffer(buffer) {\n        var data = Array.prototype.slice.call(buffer, 0, length);\n        fileData.addData(range[0], data);\n      };\n\n      fs.open(this._path, \"r\", undefined, readData);\n    }\n  }], [{\n    key: 'canReadFile',\n    value: function canReadFile(file) {\n      return typeof file === 'string' && !/^[a-z]+:\\/\\//i.test(file);\n    }\n  }]);\n\n  return NodeFileReader;\n}(MediaFileReader);\n\nmodule.exports = NodeFileReader;","map":null,"metadata":{},"sourceType":"script"}