{"ast":null,"code":"/**\n * This class represents a file that might not have all its data loaded yet.\n * It is used when loading the entire file is not an option because it's too\n * expensive. Instead, parts of the file are loaded and added only when needed.\n * From a reading point of view is as if the entire file is loaded. The\n * exception is when the data is not available yet, an error will be thrown.\n * This class does not load the data, it just manages it. It provides operations\n * to add and read data from the file.\n *\n * \n */\n'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar NOT_FOUND = -1;\n\nvar ChunkedFileData = function () {\n  _createClass(ChunkedFileData, null, [{\n    key: 'NOT_FOUND',\n    // $FlowIssue - get/set properties not yet supported\n    get: function get() {\n      return NOT_FOUND;\n    }\n  }]);\n\n  function ChunkedFileData() {\n    _classCallCheck(this, ChunkedFileData);\n\n    this._fileData = [];\n  }\n  /**\n   * Adds data to the file storage at a specific offset.\n   */\n\n\n  _createClass(ChunkedFileData, [{\n    key: 'addData',\n    value: function addData(offset, data) {\n      var offsetEnd = offset + data.length - 1;\n\n      var chunkRange = this._getChunkRange(offset, offsetEnd);\n\n      if (chunkRange.startIx === NOT_FOUND) {\n        this._fileData.splice(chunkRange.insertIx || 0, 0, {\n          offset: offset,\n          data: data\n        });\n      } else {\n        // If the data to add collides with existing chunks we prepend and\n        // append data from the half colliding chunks to make the collision at\n        // 100%. The new data can then replace all the colliding chunkes.\n        var firstChunk = this._fileData[chunkRange.startIx];\n        var lastChunk = this._fileData[chunkRange.endIx];\n        var needsPrepend = offset > firstChunk.offset;\n        var needsAppend = offsetEnd < lastChunk.offset + lastChunk.data.length - 1;\n        var chunk = {\n          offset: Math.min(offset, firstChunk.offset),\n          data: data\n        };\n\n        if (needsPrepend) {\n          var slicedData = this._sliceData(firstChunk.data, 0, offset - firstChunk.offset);\n\n          chunk.data = this._concatData(slicedData, data);\n        }\n\n        if (needsAppend) {\n          // Use the lastChunk because the slice logic is easier to handle.\n          var slicedData = this._sliceData(chunk.data, 0, lastChunk.offset - chunk.offset);\n\n          chunk.data = this._concatData(slicedData, lastChunk.data);\n        }\n\n        this._fileData.splice(chunkRange.startIx, chunkRange.endIx - chunkRange.startIx + 1, chunk);\n      }\n    }\n  }, {\n    key: '_concatData',\n    value: function _concatData(dataA, dataB) {\n      // TypedArrays don't support concat.\n      if (typeof ArrayBuffer !== \"undefined\" && ArrayBuffer.isView && ArrayBuffer.isView(dataA)) {\n        // $FlowIssue - flow thinks dataAandB is a string but it's not\n        var dataAandB = new dataA.constructor(dataA.length + dataB.length); // $FlowIssue - flow thinks dataAandB is a string but it's not\n\n        dataAandB.set(dataA, 0); // $FlowIssue - flow thinks dataAandB is a string but it's not\n\n        dataAandB.set(dataB, dataA.length);\n        return dataAandB;\n      } else {\n        // $FlowIssue - flow thinks dataAandB is a TypedArray but it's not\n        return dataA.concat(dataB);\n      }\n    }\n  }, {\n    key: '_sliceData',\n    value: function _sliceData(data, begin, end) {\n      // Some TypeArray implementations do not support slice yet.\n      if (data.slice) {\n        return data.slice(begin, end);\n      } else {\n        // $FlowIssue - flow thinks data is a string but it's not\n        return data.subarray(begin, end);\n      }\n    }\n    /**\n     * Finds the chunk range that overlaps the [offsetStart-1,offsetEnd+1] range.\n     * When a chunk is adjacent to the offset we still consider it part of the\n     * range (this is the situation of offsetStart-1 or offsetEnd+1).\n     * When no chunks are found `insertIx` denotes the index where the data\n     * should be inserted in the data list (startIx == NOT_FOUND and endIX ==\n     * NOT_FOUND).\n     */\n\n  }, {\n    key: '_getChunkRange',\n    value: function _getChunkRange(offsetStart, offsetEnd) {\n      var startChunkIx = NOT_FOUND;\n      var endChunkIx = NOT_FOUND;\n      var insertIx = 0; // Could use binary search but not expecting that many blocks to exist.\n\n      for (var i = 0; i < this._fileData.length; i++, insertIx = i) {\n        var chunkOffsetStart = this._fileData[i].offset;\n        var chunkOffsetEnd = chunkOffsetStart + this._fileData[i].data.length;\n\n        if (offsetEnd < chunkOffsetStart - 1) {\n          // This offset range doesn't overlap with any chunks.\n          break;\n        } // If it is adjacent we still consider it part of the range because\n        // we're going end up with a single block with all contiguous data.\n\n\n        if (offsetStart <= chunkOffsetEnd + 1 && offsetEnd >= chunkOffsetStart - 1) {\n          startChunkIx = i;\n          break;\n        }\n      } // No starting chunk was found, meaning that the offset is either before\n      // or after the current stored chunks.\n\n\n      if (startChunkIx === NOT_FOUND) {\n        return {\n          startIx: NOT_FOUND,\n          endIx: NOT_FOUND,\n          insertIx: insertIx\n        };\n      } // Find the ending chunk.\n\n\n      for (var i = startChunkIx; i < this._fileData.length; i++) {\n        var chunkOffsetStart = this._fileData[i].offset;\n        var chunkOffsetEnd = chunkOffsetStart + this._fileData[i].data.length;\n\n        if (offsetEnd >= chunkOffsetStart - 1) {\n          // Candidate for the end chunk, it doesn't mean it is yet.\n          endChunkIx = i;\n        }\n\n        if (offsetEnd <= chunkOffsetEnd + 1) {\n          break;\n        }\n      }\n\n      if (endChunkIx === NOT_FOUND) {\n        endChunkIx = startChunkIx;\n      }\n\n      return {\n        startIx: startChunkIx,\n        endIx: endChunkIx\n      };\n    }\n  }, {\n    key: 'hasDataRange',\n    value: function hasDataRange(offsetStart, offsetEnd) {\n      for (var i = 0; i < this._fileData.length; i++) {\n        var chunk = this._fileData[i];\n\n        if (offsetEnd < chunk.offset) {\n          return false;\n        }\n\n        if (offsetStart >= chunk.offset && offsetEnd < chunk.offset + chunk.data.length) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n  }, {\n    key: 'getByteAt',\n    value: function getByteAt(offset) {\n      var dataChunk;\n\n      for (var i = 0; i < this._fileData.length; i++) {\n        var dataChunkStart = this._fileData[i].offset;\n        var dataChunkEnd = dataChunkStart + this._fileData[i].data.length - 1;\n\n        if (offset >= dataChunkStart && offset <= dataChunkEnd) {\n          dataChunk = this._fileData[i];\n          break;\n        }\n      }\n\n      if (dataChunk) {\n        return dataChunk.data[offset - dataChunk.offset];\n      }\n\n      throw new Error(\"Offset \" + offset + \" hasn't been loaded yet.\");\n    }\n  }]);\n\n  return ChunkedFileData;\n}();\n\nmodule.exports = ChunkedFileData;","map":null,"metadata":{},"sourceType":"script"}