{"ast":null,"code":"\"use strict\";\n\nvar _objectSpread = require(\"/Users/shivanibrijmohan/Development/code/Mod5/bloc/bloc-front-end/node_modules/@babel/runtime/helpers/objectSpread\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar React = require(\"react\");\n\nvar PropTypes = require(\"prop-types\");\n\nvar actioncable = require(\"actioncable\");\n\nvar createReactClass = require(\"create-react-class\");\n\nvar _React$createContext = React.createContext(),\n    Provider = _React$createContext.Provider,\n    Consumer = _React$createContext.Consumer;\n\nvar ActionCableProvider = createReactClass({\n  componentWillMount: function componentWillMount() {\n    if (this.props.cable) {\n      this.cable = this.props.cable;\n    } else {\n      this.cable = actioncable.createConsumer(this.props.url);\n    }\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    if (!this.props.cable && this.cable) {\n      this.cable.disconnect();\n    }\n  },\n  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {\n    // Props not changed\n    if (this.props.cable === nextProps.cable && this.props.url === nextProps.url) {\n      return;\n    } // cable is created by self, disconnect it\n\n\n    this.componentWillUnmount(); // create or assign cable\n\n    this.componentWillMount();\n  },\n  render: function render() {\n    return React.createElement(Provider, {\n      value: {\n        cable: this.cable\n      }\n    }, this.props.children || null);\n  }\n});\nActionCableProvider.displayName = \"ActionCableProvider\";\nActionCableProvider.propTypes = {\n  cable: PropTypes.object,\n  url: PropTypes.string,\n  children: PropTypes.any\n};\nvar ActionCableController = createReactClass({\n  componentDidMount: function componentDidMount() {\n    var self = this;\n    var _props = this.props;\n    var onReceived = _props.onReceived;\n    var onInitialized = _props.onInitialized;\n    var onConnected = _props.onConnected;\n    var onDisconnected = _props.onDisconnected;\n    var onRejected = _props.onRejected;\n    this.cable = this.props.cable.subscriptions.create(this.props.channel, {\n      received: function received(data) {\n        onReceived && onReceived(data);\n      },\n      initialized: function initialized() {\n        onInitialized && onInitialized();\n      },\n      connected: function connected() {\n        onConnected && onConnected();\n      },\n      disconnected: function disconnected() {\n        onDisconnected && onDisconnected();\n      },\n      rejected: function rejected() {\n        onRejected && onRejected();\n      }\n    });\n  },\n  componentWillUnmount: function componentWillUnmount() {\n    if (this.cable) {\n      this.props.cable.subscriptions.remove(this.cable);\n      this.cable = null;\n    }\n  },\n  send: function send(data) {\n    if (!this.cable) {\n      throw new Error(\"ActionCable component unloaded\");\n    }\n\n    this.cable.send(data);\n  },\n  perform: function perform(action, data) {\n    if (!this.cable) {\n      throw new Error(\"ActionCable component unloaded\");\n    }\n\n    this.cable.perform(action, data);\n  },\n  render: function render() {\n    return this.props.children || null;\n  }\n});\nActionCableController.displayName = \"ActionCableController\";\nActionCableController.propTypes = {\n  cable: PropTypes.object,\n  onReceived: PropTypes.func,\n  onInitialized: PropTypes.func,\n  onConnected: PropTypes.func,\n  onDisconnected: PropTypes.func,\n  onRejected: PropTypes.func,\n  children: PropTypes.any\n};\nvar ActionCableConsumer = React.forwardRef(function (props, ref) {\n  var Component = createReactClass({\n    render: function render() {\n      var _this = this;\n\n      return React.createElement(Consumer, null, function (_ref) {\n        var cable = _ref.cable;\n        return React.createElement(ActionCableController, _objectSpread({\n          cable: cable\n        }, _this.props, {\n          ref: _this.props.forwardedRef\n        }), _this.props.children || null);\n      });\n    }\n  });\n  Component.displayName = \"ActionCableConsumer\";\n  Component.propTypes = {\n    onReceived: PropTypes.func,\n    onInitialized: PropTypes.func,\n    onConnected: PropTypes.func,\n    onDisconnected: PropTypes.func,\n    onRejected: PropTypes.func,\n    children: PropTypes.any\n  };\n  return React.createElement(Component, _objectSpread({}, props, {\n    forwardedRef: ref\n  }), props.children || null);\n});\nvar ActionCable = createReactClass({\n  componentDidMount: function componentDidMount() {\n    console.warn(\"DEPRECATION WARNING: The <ActionCable /> component has been deprecated and will be removed in a future release. Use <ActionCableConsumer /> instead.\");\n  },\n  render: function render() {\n    return React.createElement(ActionCableConsumer, _objectSpread({}, this.props), this.props.children || null);\n  }\n});\nActionCable.displayName = \"ActionCable\";\nActionCable.propTypes = {\n  onReceived: PropTypes.func,\n  onInitialized: PropTypes.func,\n  onConnected: PropTypes.func,\n  onDisconnected: PropTypes.func,\n  onRejected: PropTypes.func,\n  children: PropTypes.any\n};\nexports.ActionCable = ActionCable;\nexports.ActionCableConsumer = ActionCableConsumer;\nexports.ActionCableController = ActionCableController;\nexports.ActionCableProvider = ActionCableProvider; // Compatible old usage\n\nexports.default = ActionCableProvider;","map":null,"metadata":{},"sourceType":"script"}