{"ast":null,"code":"/**\r\n * @module color-parse\r\n */\n'use strict';\n\nvar names = require('color-name');\n\nvar isObject = require('is-plain-obj');\n\nvar defined = require('defined');\n\nmodule.exports = parse;\n/**\r\n * Base hues\r\n * http://dev.w3.org/csswg/css-color/#typedef-named-hue\r\n */\n//FIXME: use external hue detector\n\nvar baseHues = {\n  red: 0,\n  orange: 60,\n  yellow: 120,\n  green: 180,\n  blue: 240,\n  purple: 300\n  /**\r\n   * Parse color from the string passed\r\n   *\r\n   * @return {Object} A space indicator `space`, an array `values` and `alpha`\r\n   */\n\n};\n\nfunction parse(cstr) {\n  var m,\n      parts = [],\n      alpha = 1,\n      space;\n\n  if (typeof cstr === 'string') {\n    //keyword\n    if (names[cstr]) {\n      parts = names[cstr].slice();\n      space = 'rgb';\n    } //reserved words\n    else if (cstr === 'transparent') {\n        alpha = 0;\n        space = 'rgb';\n        parts = [0, 0, 0];\n      } //hex\n      else if (/^#[A-Fa-f0-9]+$/.test(cstr)) {\n          var base = cstr.slice(1);\n          var size = base.length;\n          var isShort = size <= 4;\n          alpha = 1;\n\n          if (isShort) {\n            parts = [parseInt(base[0] + base[0], 16), parseInt(base[1] + base[1], 16), parseInt(base[2] + base[2], 16)];\n\n            if (size === 4) {\n              alpha = parseInt(base[3] + base[3], 16) / 255;\n            }\n          } else {\n            parts = [parseInt(base[0] + base[1], 16), parseInt(base[2] + base[3], 16), parseInt(base[4] + base[5], 16)];\n\n            if (size === 8) {\n              alpha = parseInt(base[6] + base[7], 16) / 255;\n            }\n          }\n\n          if (!parts[0]) parts[0] = 0;\n          if (!parts[1]) parts[1] = 0;\n          if (!parts[2]) parts[2] = 0;\n          space = 'rgb';\n        } //color space\n        else if (m = /^((?:rgb|hs[lvb]|hwb|cmyk?|xy[zy]|gray|lab|lchu?v?|[ly]uv|lms)a?)\\s*\\(([^\\)]*)\\)/.exec(cstr)) {\n            var name = m[1];\n            var base = name.replace(/a$/, '');\n            space = base;\n            var size = base === 'cmyk' ? 4 : base === 'gray' ? 1 : 3;\n            parts = m[2].trim().split(/\\s*,\\s*/).map(function (x, i) {\n              //<percentage>\n              if (/%$/.test(x)) {\n                //alpha\n                if (i === size) return parseFloat(x) / 100; //rgb\n\n                if (base === 'rgb') return parseFloat(x) * 255 / 100;\n                return parseFloat(x);\n              } //hue\n              else if (base[i] === 'h') {\n                  //<deg>\n                  if (/deg$/.test(x)) {\n                    return parseFloat(x);\n                  } //<base-hue>\n                  else if (baseHues[x] !== undefined) {\n                      return baseHues[x];\n                    }\n                }\n\n              return parseFloat(x);\n            });\n            if (name === base) parts.push(1);\n            alpha = parts[size] === undefined ? 1 : parts[size];\n            parts = parts.slice(0, size);\n          } //named channels case\n          else if (cstr.length > 10 && /[0-9](?:\\s|\\/)/.test(cstr)) {\n              parts = cstr.match(/([0-9]+)/g).map(function (value) {\n                return parseFloat(value);\n              });\n              space = cstr.match(/([a-z])/ig).join('').toLowerCase();\n            }\n  } //numeric case\n  else if (!isNaN(cstr)) {\n      space = 'rgb';\n      parts = [cstr >>> 16, (cstr & 0x00ff00) >>> 8, cstr & 0x0000ff];\n    } //object case - detects css cases of rgb and hsl\n    else if (isObject(cstr)) {\n        var r = defined(cstr.r, cstr.red, cstr.R, null);\n\n        if (r !== null) {\n          space = 'rgb';\n          parts = [r, defined(cstr.g, cstr.green, cstr.G), defined(cstr.b, cstr.blue, cstr.B)];\n        } else {\n          space = 'hsl';\n          parts = [defined(cstr.h, cstr.hue, cstr.H), defined(cstr.s, cstr.saturation, cstr.S), defined(cstr.l, cstr.lightness, cstr.L, cstr.b, cstr.brightness)];\n        }\n\n        alpha = defined(cstr.a, cstr.alpha, cstr.opacity, 1);\n        if (cstr.opacity != null) alpha /= 100;\n      } //array\n      else if (Array.isArray(cstr) || global.ArrayBuffer && ArrayBuffer.isView && ArrayBuffer.isView(cstr)) {\n          parts = [cstr[0], cstr[1], cstr[2]];\n          space = 'rgb';\n          alpha = cstr.length === 4 ? cstr[3] : 1;\n        }\n\n  return {\n    space: space,\n    values: parts,\n    alpha: alpha\n  };\n}","map":null,"metadata":{},"sourceType":"script"}